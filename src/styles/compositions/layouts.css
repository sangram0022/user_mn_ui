/**
 * LAYOUT COMPOSITIONS
 * 
 * Reusable layout primitives following the "Every Layout" methodology.
 * These composition patterns solve common layout problems without custom CSS.
 * 
 * Usage with React:
 * <div className="stack" data-gap="lg">
 *   <Card />
 *   <Card />
 * </div>
 */

@layer layouts {
  /* ========================================================================
     STACK - Vertical spacing
     ======================================================================== */

  .stack {
    display: flex;
    flex-direction: column;
    justify-content: flex-start;
  }

  .stack > * + * {
    margin-block-start: var(--stack-gap, var(--spacing-component-md));
  }

  /* Stack gap variants */
  .stack[data-gap='xs'] {
    --stack-gap: var(--spacing-component-xs);
  }

  .stack[data-gap='sm'] {
    --stack-gap: var(--spacing-component-sm);
  }

  .stack[data-gap='md'] {
    --stack-gap: var(--spacing-component-md);
  }

  .stack[data-gap='lg'] {
    --stack-gap: var(--spacing-component-lg);
  }

  .stack[data-gap='xl'] {
    --stack-gap: var(--spacing-component-xl);
  }

  /* ========================================================================
     CLUSTER - Horizontal spacing with wrapping
     ======================================================================== */

  .cluster {
    display: flex;
    flex-wrap: wrap;
    gap: var(--cluster-gap, var(--spacing-component-md));
    align-items: center;
  }

  .cluster[data-gap='xs'] {
    --cluster-gap: var(--spacing-component-xs);
  }

  .cluster[data-gap='sm'] {
    --cluster-gap: var(--spacing-component-sm);
  }

  .cluster[data-gap='md'] {
    --cluster-gap: var(--spacing-component-md);
  }

  .cluster[data-gap='lg'] {
    --cluster-gap: var(--spacing-component-lg);
  }

  .cluster[data-gap='xl'] {
    --cluster-gap: var(--spacing-component-xl);
  }

  /* Alignment variants */
  .cluster[data-align='start'] {
    justify-content: flex-start;
  }

  .cluster[data-align='center'] {
    justify-content: center;
  }

  .cluster[data-align='end'] {
    justify-content: flex-end;
  }

  .cluster[data-align='between'] {
    justify-content: space-between;
  }

  /* ========================================================================
     CENTER - Horizontal and vertical centering
     ======================================================================== */

  .center {
    box-sizing: content-box;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-inline: auto;
    max-inline-size: var(--center-max-width, var(--layout-max-width-xl));
  }

  .center[data-text] {
    text-align: center;
  }

  .center[data-intrinsic] {
    align-items: center;
  }

  /* ========================================================================
     BOX - Consistent padding
     ======================================================================== */

  .box {
    padding: var(--box-padding, var(--spacing-component-md));
    border: var(--box-border-width, 0) solid rgb(var(--color-border-primary));
    background-color: var(--box-bg, transparent);
    border-radius: var(--box-radius, 0);
  }

  .box[data-padding='xs'] {
    --box-padding: var(--spacing-component-xs);
  }

  .box[data-padding='sm'] {
    --box-padding: var(--spacing-component-sm);
  }

  .box[data-padding='md'] {
    --box-padding: var(--spacing-component-md);
  }

  .box[data-padding='lg'] {
    --box-padding: var(--spacing-component-lg);
  }

  .box[data-padding='xl'] {
    --box-padding: var(--spacing-component-xl);
  }

  /* ========================================================================
     SIDEBAR - Fixed sidebar with flexible content
     ======================================================================== */

  .with-sidebar {
    display: flex;
    flex-wrap: wrap;
    gap: var(--sidebar-gap, var(--spacing-layout-md));
  }

  .with-sidebar > :first-child {
    flex-basis: var(--sidebar-width, var(--layout-sidebar-width));
    flex-grow: 1;
  }

  .with-sidebar > :last-child {
    flex-basis: 0;
    flex-grow: 999;
    min-inline-size: var(--sidebar-content-min, 50%);
  }

  /* ========================================================================
     SWITCHER - Responsive horizontal/vertical layout
     ======================================================================== */

  .switcher {
    display: flex;
    flex-wrap: wrap;
    gap: var(--switcher-gap, var(--spacing-component-md));
  }

  .switcher > * {
    flex-grow: 1;
    flex-basis: calc((var(--switcher-threshold, 30rem) - 100%) * 999);
  }

  /* ========================================================================
     GRID - Responsive auto-fit grid
     ======================================================================== */

  .auto-grid {
    display: grid;
    grid-template-columns: repeat(
      auto-fit,
      minmax(min(var(--grid-min-item-size, 250px), 100%), 1fr)
    );
    gap: var(--grid-gap, var(--spacing-component-md));
  }

  .auto-grid[data-gap='xs'] {
    --grid-gap: var(--spacing-component-xs);
  }

  .auto-grid[data-gap='sm'] {
    --grid-gap: var(--spacing-component-sm);
  }

  .auto-grid[data-gap='md'] {
    --grid-gap: var(--spacing-component-md);
  }

  .auto-grid[data-gap='lg'] {
    --grid-gap: var(--spacing-component-lg);
  }

  .auto-grid[data-gap='xl'] {
    --grid-gap: var(--spacing-component-xl);
  }

  /* Grid column variants */
  .auto-grid[data-columns='2'] {
    --grid-min-item-size: 400px;
  }

  .auto-grid[data-columns='3'] {
    --grid-min-item-size: 300px;
  }

  .auto-grid[data-columns='4'] {
    --grid-min-item-size: 250px;
  }

  /* ========================================================================
     COVER - Full viewport coverage
     ======================================================================== */

  .cover {
    display: flex;
    flex-direction: column;
    min-block-size: var(--cover-min-height, 100vh);
    padding: var(--cover-padding, var(--spacing-layout-md));
  }

  .cover > * {
    margin-block: var(--cover-gap, var(--spacing-component-md));
  }

  .cover > :first-child:not([data-centered]) {
    margin-block-start: 0;
  }

  .cover > :last-child:not([data-centered]) {
    margin-block-end: 0;
  }

  .cover > [data-centered] {
    margin-block: auto;
  }

  /* ========================================================================
     FRAME - Aspect ratio container
     ======================================================================== */

  .frame {
    aspect-ratio: var(--frame-ratio, 16 / 9);
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .frame > * {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
  }

  /* Frame ratio variants */
  .frame[data-ratio='1:1'] {
    --frame-ratio: 1;
  }

  .frame[data-ratio='4:3'] {
    --frame-ratio: 4 / 3;
  }

  .frame[data-ratio='16:9'] {
    --frame-ratio: 16 / 9;
  }

  .frame[data-ratio='21:9'] {
    --frame-ratio: 21 / 9;
  }

  /* ========================================================================
     CONTAINER - Responsive max-width container
     ======================================================================== */

  .container {
    width: 100%;
    margin-inline: auto;
    padding-inline: var(--layout-container-padding);
    max-width: var(--container-max-width, var(--layout-max-width-xl));
  }

  .container[data-size='sm'] {
    --container-max-width: var(--layout-max-width-sm);
  }

  .container[data-size='md'] {
    --container-max-width: var(--layout-max-width-md);
  }

  .container[data-size='lg'] {
    --container-max-width: var(--layout-max-width-lg);
  }

  .container[data-size='xl'] {
    --container-max-width: var(--layout-max-width-xl);
  }

  .container[data-size='2xl'] {
    --container-max-width: var(--layout-max-width-2xl);
  }

  .container[data-size='full'] {
    --container-max-width: 100%;
  }
}
