/**
 * Role Management Page
 *
 * Comprehensive role and permission management interface.
 * Allows CRUD operations on roles, permission assignments, and user-role relationships.
 *
 * Enhanced with Phase 2 patterns:
 * - Toast notifications for user feedback
 * - Enhanced skeleton loaders for loading states
 * - WCAG 2.1 AA accessibility compliance
 * - Performance monitoring integration
 *
 * @author Generated by GitHub Copilot
 */

import { Lock, Plus, Search, Shield, Trash2, UserPlus } from 'lucide-react';
import { useActionState, useEffect, useOptimistic, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useLocalization } from '@hooks/localization/useLocalization';
import { usePerformanceMonitor } from '@hooks/usePerformanceMonitor';
import { useToast } from '@hooks/useToast';
import { TextInput } from '@shared/components/forms/FormComponents';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { Modal, ModalFooter } from '@shared/ui/Modal';
import { Skeleton } from '@shared/ui/Skeleton';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface Role {
  role_id: string;
  role_name: string;
  description: string;
  permissions: string[];
  isOptimistic?: boolean; // âœ… React 19: Add optimistic flag
}

interface Permission {
  permission_id: string;
  category: string;
  action: string;
  resource: string;
  description?: string;
}

interface AssignRoleModalProps {
  isOpen: boolean;
  onClose: () => void;
  roles: Role[];
  onAssign: (userId: string, roleId: string, expiresAt?: string) => Promise<void>;
}

interface CreateRoleModalProps {
  isOpen: boolean;
  onClose: () => void;
  permissions: Permission[];
  onSuccess?: () => void;
}

// Server action for role creation
interface CreateRoleState {
  success: boolean;
  error: string | null;
  roleId?: string;
}

async function createRoleAction(
  _prevState: CreateRoleState,
  formData: FormData
): Promise<CreateRoleState> {
  const role_name = formData.get('role_name') as string;
  const description = formData.get('description') as string;
  const permissions = formData.getAll('permissions') as string[];

  // Validation
  if (!role_name || !description) {
    return {
      success: false,
      error: 'Role name and description are required',
    };
  }

  if (permissions.length === 0) {
    return {
      success: false,
      error: 'At least one permission must be selected',
    };
  }

  try {
    const result = await adminService.createRole({
      role_name,
      description,
      permissions,
    });

    return {
      success: true,
      error: null,
      roleId: result.role_id,
    };
  } catch (error: unknown) {
    const errorMessage = error instanceof Error ? error.message : 'Failed to create role';
    return {
      success: false,
      error: errorMessage,
    };
  }
}

// ============================================================================
// Components
// ============================================================================

const CreateRoleModal: FC<CreateRoleModalProps> = ({ isOpen, onClose, permissions, onSuccess }) => {
  const { t } = useLocalization();
  const { toast } = useToast();
  const [selectedPermissions, setSelectedPermissions] = useState<Set<string>>(new Set());

  // Use React 19's useActionState for role creation
  const [state, submitAction, isPending] = useActionState(createRoleAction, {
    success: false,
    error: null,
  });

  // React 19 best practice: Handle success in event handler, not useEffect
  useEffect(() => {
    if (state.success) {
      // Show success toast
      toast.success(t('roles.roleCreatedSuccessfully'));
      // Only handle side effects here
      onSuccess?.();
      onClose();
    }
  }, [state.success, onSuccess, onClose, toast, t]);

  // Toggle permission selection
  const togglePermission = (permissionId: string) => {
    setSelectedPermissions((prev) => {
      const newSelected = new Set(prev);
      if (newSelected.has(permissionId)) {
        newSelected.delete(permissionId);
      } else {
        newSelected.add(permissionId);
      }
      return newSelected;
    });
  };

  if (!isOpen) return null;

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title={t('roles.createNewRole')}
      size="lg"
      className="max-h-[90vh]"
    >
      <form action={submitAction} className="flex flex-col h-full">
        {/* Inline error display */}
        {state.error && (
          <div className="mb-4 rounded-lg border border-red-200 bg-red-50 px-4 py-2 text-sm text-red-600">
            {state.error}
          </div>
        )}

        {/* Role Name */}
        <div className="mb-4">
          <label htmlFor="role_name" className="block text-sm font-medium text-gray-700 mb-1">
            {t('roles.roleName')}
          </label>
          <input
            id="role_name"
            name="role_name"
            type="text"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder={t('roles.enterRoleName')}
            required
          />
        </div>

        {/* Description */}
        <div className="mb-4">
          <label htmlFor="description" className="block text-sm font-medium text-gray-700 mb-1">
            {t('roles.description')}
          </label>
          <textarea
            id="description"
            name="description"
            className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            placeholder={t('roles.enterRoleDescription')}
            rows={3}
            required
          />
        </div>

        {/* Permissions */}
        <div className="mb-4">
          <label htmlFor="permissions" className="block text-sm font-medium text-gray-700 mb-2">
            {t('roles.permissions')}
          </label>
          <div className="border border-gray-300 rounded-md max-h-48 overflow-y-auto">
            {permissions.map((permission) => (
              <div
                key={permission.permission_id}
                className="flex items-center p-3 border-b border-gray-100 last:border-0 hover:bg-gray-50"
              >
                <input
                  type="checkbox"
                  name="permissions"
                  value={permission.permission_id}
                  checked={selectedPermissions.has(permission.permission_id)}
                  onChange={() => togglePermission(permission.permission_id)}
                  className="mr-3 h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <div className="flex-1">
                  <div className="text-sm font-medium text-gray-900">
                    {permission.action} - {permission.resource}
                  </div>
                  <div className="text-xs text-gray-500">
                    {t('roles.category')}: {permission.category}
                  </div>
                  {permission.description && (
                    <div className="text-xs text-gray-600 mt-1">{permission.description}</div>
                  )}
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Footer with buttons */}
        <ModalFooter
          secondaryAction={
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {t('roles.cancel')}
            </button>
          }
          primaryAction={
            <button
              type="submit"
              disabled={isPending || selectedPermissions.size === 0}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              {isPending ? t('roles.creating') : t('roles.createRole')}
            </button>
          }
        />
      </form>
    </Modal>
  );
};

const AssignRoleModal: FC<AssignRoleModalProps> = ({ isOpen, onClose, roles, onAssign }) => {
  const [userId, setUserId] = useState('');
  const [selectedRoleId, setSelectedRoleId] = useState('');
  const [expiresAt, setExpiresAt] = useState('');
  const [isLoading, setIsLoading] = useState(false);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!userId || !selectedRoleId) return;

    setIsLoading(true);
    try {
      await onAssign(userId, selectedRoleId, expiresAt || undefined);
      setUserId('');
      setSelectedRoleId('');
      setExpiresAt('');
      onClose();
    } finally {
      setIsLoading(false);
    }
  };

  if (!isOpen) return null;

  return (
    <Modal isOpen={isOpen} onClose={onClose} title="Assign Role to User" size="md">
      <form onSubmit={handleSubmit}>
        <div className="space-y-4">
          <TextInput
            label="User ID"
            value={userId}
            onChange={setUserId}
            placeholder="Enter user ID"
            required
          />

          <div>
            <label htmlFor="roleSelect" className="block text-sm font-medium text-gray-700 mb-1">
              Role
            </label>
            <select
              id="roleSelect"
              value={selectedRoleId}
              onChange={(e) => setSelectedRoleId(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              required
            >
              <option value="">Select a role</option>
              {roles.map((role) => (
                <option key={role.role_id} value={role.role_id}>
                  {role.role_name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label htmlFor="expiresAt" className="block text-sm font-medium text-gray-700 mb-1">
              Expires At (Optional)
            </label>
            <input
              id="expiresAt"
              type="datetime-local"
              value={expiresAt}
              onChange={(e) => setExpiresAt(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <ModalFooter
          secondaryAction={
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
            >
              Cancel
            </button>
          }
          primaryAction={
            <button
              type="submit"
              disabled={isLoading || !userId || !selectedRoleId}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-600 border border-transparent rounded-md hover:bg-blue-700 disabled:opacity-50"
            >
              {isLoading ? 'Assigning...' : 'Assign Role'}
            </button>
          }
        />
      </form>
    </Modal>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const RoleManagementPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { t } = useLocalization();
  const { toast } = useToast();
  const { recordMetric, measure } = usePerformanceMonitor('RoleManagementPage');

  // State
  const [roles, setRoles] = useState<Role[]>([]);

  // âœ… React 19: useOptimistic for instant UI updates
  const [optimisticRoles, updateOptimisticRoles] = useOptimistic(
    roles,
    (state: Role[], action: { type: 'delete'; roleId: string }) => {
      if (action.type === 'delete') {
        return state.filter((role) => role.role_id !== action.roleId);
      }
      return state;
    }
  );

  const [permissions, setPermissions] = useState<Permission[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isAssignModalOpen, setIsAssignModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');

  // Check permissions
  const canManageRoles = hasPermission('admin') || hasPermission('rbac:write');
  const canViewRoles = hasPermission('admin') || hasPermission('rbac:read');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadRoles = async () => {
    if (!canViewRoles) return;

    return await measure('load-roles', async () => {
      try {
        const rolesData = await adminService.getRoles();
        setRoles(rolesData);
        recordMetric('roles-loaded', rolesData.length);
      } catch (error) {
        handleError(error, t('roles.failedToLoadRoles'));
        toast.error(t('roles.failedToLoadRoles'));
      }
    });
  };

  const loadPermissions = async () => {
    if (!canViewRoles) return;

    return await measure('load-permissions', async () => {
      try {
        const permissionsData = await adminService.getPermissions();
        setPermissions(permissionsData);
        recordMetric('permissions-loaded', permissionsData.length);
      } catch (error) {
        handleError(error, t('roles.failedToLoadPermissions'));
        toast.error(t('roles.failedToLoadPermissions'));
      }
    });
  };

  const loadAllData = async () => {
    setIsLoading(true);
    clearError();

    try {
      await Promise.all([loadRoles(), loadPermissions()]);
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================
  // Action Functions
  // ============================================================================

  const handleDeleteRole = async (roleId: string) => {
    if (!confirm(t('roles.confirmDeleteRole'))) return;

    // âœ… React 19: Optimistic delete - instant UI update
    updateOptimisticRoles({ type: 'delete', roleId });

    return await measure('delete-role', async () => {
      try {
        await adminService.deleteRole(roleId);
        // Confirm deletion in real state
        setRoles((prev) => prev.filter((role) => role.role_id !== roleId));
        toast.success(t('roles.roleDeletedSuccessfully'));
        recordMetric('role-deleted', 1);
      } catch (error) {
        handleError(error, t('roles.failedToDeleteRole'));
        toast.error(t('roles.failedToDeleteRole'));
        // âœ… UI automatically rolls back on error
        // Re-load to restore the role
        await loadRoles();
      }
    });
  };

  const handleAssignRole = async (userId: string, roleId: string, expiresAt?: string) => {
    return await measure('assign-role', async () => {
      try {
        await adminService.assignRole(userId, roleId, expiresAt);
        toast.success(t('roles.roleAssignedSuccessfully'));
        recordMetric('role-assigned', 1);
      } catch (error) {
        handleError(error, t('roles.failedToAssignRole'));
        toast.error(t('roles.failedToAssignRole'));
        throw error;
      }
    });
  };

  // ============================================================================
  // Filter Functions
  // ============================================================================

  // âœ… React 19: Use optimisticRoles for instant UI updates
  const filteredRoles = optimisticRoles.filter((role) => {
    const matchesSearch =
      role.role_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      role.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesSearch;
  });

  const categories = Array.from(new Set(permissions.map((p) => p.category)));

  const filteredPermissions = permissions.filter((permission) => {
    return !selectedCategory || permission.category === selectedCategory;
  });

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canViewRoles) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to view role management.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Breadcrumb />
          <div className="mt-4 flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Role Management</h1>
              <p className="text-gray-600 mt-1">Manage user roles and permissions</p>
            </div>
            {canManageRoles && (
              <div className="flex space-x-3" role="group" aria-label="Role management actions">
                <button
                  onClick={() => setIsAssignModalOpen(true)}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  aria-label="Assign role to user"
                >
                  <UserPlus className="w-4 h-4 mr-2" aria-hidden="true" />
                  {t('roles.assignRole')}
                </button>
                <button
                  onClick={() => setIsCreateModalOpen(true)}
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  aria-label="Create new role"
                >
                  <Plus className="w-4 h-4 mr-2" aria-hidden="true" />
                  {t('roles.createRole')}
                </button>
              </div>
            )}
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-6">
            <ErrorAlert error={error} onDismiss={clearError} />
          </div>
        )}

        {/* Search and Filters */}
        <div
          className="bg-white rounded-lg shadow-sm border mb-6"
          role="search"
          aria-label="Role search"
        >
          <div className="px-6 py-4">
            <div className="flex items-center space-x-4">
              <div className="flex-1">
                <div className="relative">
                  <Search
                    className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5"
                    aria-hidden="true"
                  />
                  <input
                    type="text"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    placeholder="Search roles..."
                    aria-label="Search roles by name or description"
                    aria-describedby="search-help"
                    className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <span id="search-help" className="sr-only">
                    Filter roles by searching in role name or description
                  </span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Roles List */}
        <div className="bg-white rounded-lg shadow-sm border">
          <div className="px-6 py-4 border-b border-gray-200">
            <h3 className="text-lg font-medium text-gray-900">
              {t('roles.roles', { count: filteredRoles.length })}
            </h3>
          </div>
          <div
            className="p-6"
            role="region"
            aria-label="Roles list"
            aria-live="polite"
            aria-atomic="false"
          >
            {isLoading ? (
              <div className="space-y-4" role="status" aria-label="Loading roles">
                <span className="sr-only">Loading roles, please wait...</span>
                {Array.from({ length: 5 }).map((_, i) => (
                  <div key={i} className="p-4 border border-gray-200 rounded-lg">
                    <Skeleton className="h-4 w-1/4 mb-2" />
                    <Skeleton className="h-3 w-3/4 mb-2" />
                    <Skeleton className="h-3 w-1/2" />
                  </div>
                ))}
              </div>
            ) : filteredRoles.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" role="list">
                {filteredRoles.map((role) => (
                  <div
                    key={role.role_id}
                    className="p-4 border border-gray-200 rounded-lg hover:shadow-md transition-shadow focus-within:ring-2 focus-within:ring-blue-500 focus-within:ring-offset-2"
                    role="listitem"
                    aria-labelledby={`role-name-${role.role_id}`}
                    aria-describedby={`role-desc-${role.role_id}`}
                  >
                    <div className="flex items-start justify-between mb-3">
                      <div className="flex items-center">
                        <Shield className="w-5 h-5 text-blue-600 mr-2" aria-hidden="true" />
                        <h4
                          id={`role-name-${role.role_id}`}
                          className="text-lg font-medium text-gray-900"
                        >
                          {role.role_name}
                        </h4>
                      </div>
                      {canManageRoles && (
                        <div className="flex space-x-1">
                          <button
                            onClick={() => handleDeleteRole(role.role_id)}
                            className="text-red-600 hover:text-red-900 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-1 rounded p-1"
                            aria-label={`Delete role ${role.role_name}`}
                            title={`Delete ${role.role_name}`}
                          >
                            <Trash2 className="w-4 h-4" aria-hidden="true" />
                          </button>
                        </div>
                      )}
                    </div>
                    <p id={`role-desc-${role.role_id}`} className="text-gray-600 text-sm mb-3">
                      {role.description}
                    </p>
                    <div className="flex items-center justify-between">
                      <span className="text-sm text-gray-500">
                        {t('roles.permissionsCount', { count: role.permissions.length })}
                      </span>
                      <div className="flex flex-wrap gap-1">
                        {role.permissions.slice(0, 3).map((permission) => (
                          <span
                            key={permission}
                            className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-100 text-blue-800"
                          >
                            {permission}
                          </span>
                        ))}
                        {role.permissions.length > 3 && (
                          <span className="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                            {t('roles.more', { count: role.permissions.length - 3 })}
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center py-12" role="status">
                <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">
                  {t('roles.noRolesFound')}
                </h3>
                <p className="text-gray-600">
                  {searchTerm ? t('roles.noRolesMatchSearch') : t('roles.noRolesCreatedYet')}
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Available Permissions */}
        <div className="mt-8 bg-white rounded-lg shadow-sm border">
          <div className="px-6 py-4 border-b border-gray-200">
            <div className="flex items-center justify-between">
              <h3 className="text-lg font-medium text-gray-900">
                {t('roles.availablePermissions')}
              </h3>
              <select
                value={selectedCategory}
                onChange={(e) => setSelectedCategory(e.target.value)}
                className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                aria-label="Filter permissions by category"
              >
                <option value="">{t('roles.allCategories')}</option>
                {categories.map((category) => (
                  <option key={category} value={category}>
                    {category}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div
            className="p-6"
            role="region"
            aria-label="Available permissions list"
            aria-live="polite"
          >
            {isLoading ? (
              <div className="space-y-2" role="status" aria-label="Loading permissions">
                <span className="sr-only">Loading permissions, please wait...</span>
                {Array.from({ length: 8 }).map((_, i) => (
                  <Skeleton key={i} className="h-8 w-full" />
                ))}
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4" role="list">
                {filteredPermissions.map((permission) => (
                  <div
                    key={permission.permission_id}
                    className="p-3 border border-gray-200 rounded-lg focus-within:ring-2 focus-within:ring-blue-500"
                    role="listitem"
                    aria-labelledby={`permission-${permission.permission_id}`}
                  >
                    <div className="flex items-center mb-2">
                      <Lock className="w-4 h-4 text-gray-600 mr-2" aria-hidden="true" />
                      <span
                        id={`permission-${permission.permission_id}`}
                        className="font-medium text-gray-900"
                      >
                        {permission.action} - {permission.resource}
                      </span>
                    </div>
                    <div className="text-sm text-gray-600">
                      Category: <span className="font-medium">{permission.category}</span>
                    </div>
                    {permission.description && (
                      <div className="text-xs text-gray-500 mt-1">{permission.description}</div>
                    )}
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Modals */}
      <CreateRoleModal
        isOpen={isCreateModalOpen}
        onClose={() => setIsCreateModalOpen(false)}
        permissions={permissions}
        onSuccess={loadRoles}
      />

      <AssignRoleModal
        isOpen={isAssignModalOpen}
        onClose={() => setIsAssignModalOpen(false)}
        roles={roles}
        onAssign={handleAssignRole}
      />
    </div>
  );
};

export default RoleManagementPage;
