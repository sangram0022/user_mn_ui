/**
 * Bulk Operations Page
 *
 * User import and bulk operation interface with CSV upload, validation,
 * progress tracking, and rollback capabilities.
 *
 * Note: AWS deployment handles infrastructure monitoring via CloudWatch.
 * This component focuses on UI/UX with toast notifications and accessibility.
 *
 * @author Generated by GitHub Copilot
 */

import {
  AlertCircle,
  AlertTriangle,
  CheckCircle,
  Download,
  Eye,
  FileUp,
  Pause,
  Play,
  RotateCcw,
  Square,
  Upload,
  Users,
  XCircle,
} from 'lucide-react';
import { useEffect, useRef, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useToast } from '@hooks/useToast';
import { Skeleton } from '@shared/components/ui/Skeleton';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { formatDateTime } from '@shared/utils';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface BulkOperationResult {
  operation_id: string;
  type: 'user_import' | 'user_update' | 'user_delete';
  status: 'pending' | 'running' | 'completed' | 'failed' | 'paused';
  total_records: number;
  processed_records: number;
  successful_records: number;
  failed_records: number;
  created_at: string;
  started_at?: string;
  completed_at?: string;
  errors: Array<{
    row: number;
    field?: string;
    message: string;
    data?: Record<string, unknown>;
  }>;
  warnings: Array<{
    row: number;
    field?: string;
    message: string;
    data?: Record<string, unknown>;
  }>;
}

interface ValidationResult {
  is_valid: boolean;
  valid_count: number;
  invalid_count: number;
  total_count: number;
  errors: Array<{
    row: number;
    field?: string;
    message: string;
    data?: Record<string, unknown>;
  }>;
  warnings: Array<{
    row: number;
    field?: string;
    message: string;
    data?: Record<string, unknown>;
  }>;
  preview: Array<{
    row: number;
    email: string;
    first_name: string;
    last_name: string;
    roles?: string[];
  }>;
}

interface UploadProgress {
  loaded: number;
  total: number;
  percentage: number;
}

// ============================================================================
// Components
// ============================================================================

const StatusBadge: FC<{ status: string }> = ({ status }) => {
  const getStatusConfig = (status: string) => {
    switch (status) {
      case 'pending':
        return {
          color: 'bg-gray-100 text-gray-800 border-gray-200',
          icon: AlertCircle,
          label: 'Pending',
        };
      case 'running':
        return {
          color: 'bg-blue-100 text-blue-800 border-blue-200',
          icon: Play,
          label: 'Running',
        };
      case 'completed':
        return {
          color: 'bg-green-100 text-green-800 border-green-200',
          icon: CheckCircle,
          label: 'Completed',
        };
      case 'failed':
        return {
          color: 'bg-red-100 text-red-800 border-red-200',
          icon: XCircle,
          label: 'Failed',
        };
      case 'paused':
        return {
          color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
          icon: Pause,
          label: 'Paused',
        };
      default:
        return {
          color: 'bg-gray-100 text-gray-800 border-gray-200',
          icon: AlertCircle,
          label: 'Unknown',
        };
    }
  };

  const { color, icon: Icon, label } = getStatusConfig(status);

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${color}`}
      role="status"
      aria-label={`Operation status: ${label}`}
    >
      <Icon className="w-3 h-3 mr-1" aria-hidden="true" />
      {status}
    </span>
  );
};

const ProgressBar: FC<{
  current: number;
  total: number;
  status: string;
  showPercentage?: boolean;
}> = ({ current, total, status, showPercentage = true }) => {
  const percentage = total > 0 ? Math.round((current / total) * 100) : 0;

  const getBarColor = () => {
    switch (status) {
      case 'completed':
        return 'bg-green-500';
      case 'failed':
        return 'bg-red-500';
      case 'running':
        return 'bg-blue-500';
      case 'paused':
        return 'bg-yellow-500';
      default:
        return 'bg-gray-500';
    }
  };

  return (
    <div className="w-full" role="group" aria-label="Operation progress">
      <div className="flex justify-between text-sm text-gray-600 mb-1">
        <span aria-label={`Processed ${current} of ${total} records`}>
          {current} / {total}
        </span>
        {showPercentage && <span aria-label={`${percentage} percent complete`}>{percentage}%</span>}
      </div>
      <div
        className="w-full bg-gray-200 rounded-full h-2"
        role="progressbar"
        aria-valuenow={percentage}
        aria-valuemin={0}
        aria-valuemax={100}
        aria-label={`Progress: ${percentage}% complete`}
      >
        <div
          className={`progress-indicator h-2 rounded-full transition-all duration-300 ${getBarColor()}`}
          style={{ '--progress-width': `${percentage}%` } as React.CSSProperties}
        />
      </div>
    </div>
  );
};

const FileUploadArea: FC<{
  onFileSelect: (file: File) => void;
  isUploading: boolean;
  progress?: UploadProgress;
}> = ({ onFileSelect, isUploading, progress }) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragOver, setIsDragOver] = useState(false);

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(true);
  };

  const handleDragLeave = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    setIsDragOver(false);

    const files = e.dataTransfer.files;
    if (files.length > 0) {
      const file = files[0];
      if (file.type === 'text/csv' || file.name.endsWith('.csv')) {
        onFileSelect(file);
      }
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      onFileSelect(files[0]);
    }
  };

  if (isUploading && progress) {
    return (
      <div
        className="border-2 border-blue-300 border-dashed rounded-lg p-8 text-center bg-blue-50"
        role="status"
        aria-live="polite"
        aria-label="Uploading file"
      >
        <FileUp className="w-12 h-12 text-blue-400 mx-auto mb-4" aria-hidden="true" />
        <p className="text-lg font-medium text-gray-900 mb-2">Uploading file...</p>
        <div className="max-w-xs mx-auto">
          <ProgressBar
            current={progress.loaded}
            total={progress.total}
            status="running"
            showPercentage={true}
          />
        </div>
      </div>
    );
  }

  return (
    <button
      type="button"
      className={`w-full border-2 border-dashed rounded-lg p-8 text-center transition-colors cursor-pointer ${
        isDragOver ? 'border-blue-400 bg-blue-50' : 'border-gray-300 bg-white hover:border-gray-400'
      }`}
      onDragOver={handleDragOver}
      onDragLeave={handleDragLeave}
      onDrop={handleDrop}
      onClick={() => fileInputRef.current?.click()}
      aria-label="Upload CSV file for bulk operations. Drag and drop or click to browse."
    >
      <Upload className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
      <h3 className="text-lg font-medium text-gray-900 mb-2">Upload CSV File</h3>
      <p className="text-gray-600 mb-4">Drag and drop your CSV file here, or click to browse</p>
      <p className="text-sm text-gray-500">
        Supports CSV files with columns: email, first_name, last_name, roles (optional)
      </p>
      <input
        ref={fileInputRef}
        type="file"
        accept=".csv"
        onChange={handleFileInputChange}
        className="hidden"
        aria-label="Select CSV file"
      />
    </button>
  );
};

const ValidationResults: FC<{
  validation: ValidationResult;
  onProceed: () => void;
  onCancel: () => void;
  isProcessing: boolean;
}> = ({ validation, onProceed, onCancel, isProcessing }) => {
  const [showErrors, setShowErrors] = useState(false);
  const [showWarnings, setShowWarnings] = useState(false);
  const [showPreview, setShowPreview] = useState(false);

  return (
    <div className="space-y-6" role="region" aria-label="File validation results">
      {/* Summary Cards */}
      <div
        className="grid grid-cols-1 md:grid-cols-3 gap-4"
        role="group"
        aria-label="Validation summary"
      >
        <div className="bg-white p-4 rounded-lg border" role="status">
          <div className="flex items-center">
            <CheckCircle className="w-8 h-8 text-green-500 mr-3" aria-hidden="true" />
            <div>
              <p className="text-sm font-medium text-gray-600">Valid Records</p>
              <p
                className="text-2xl font-bold text-gray-900"
                aria-label={`${validation.valid_count} valid records`}
              >
                {validation.valid_count}
              </p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg border" role="status">
          <div className="flex items-center">
            <XCircle className="w-8 h-8 text-red-500 mr-3" aria-hidden="true" />
            <div>
              <p className="text-sm font-medium text-gray-600">Invalid Records</p>
              <p
                className="text-2xl font-bold text-gray-900"
                aria-label={`${validation.invalid_count} invalid records`}
              >
                {validation.invalid_count}
              </p>
            </div>
          </div>
        </div>
        <div className="bg-white p-4 rounded-lg border" role="status">
          <div className="flex items-center">
            <AlertTriangle className="w-8 h-8 text-yellow-500 mr-3" aria-hidden="true" />
            <div>
              <p className="text-sm font-medium text-gray-600">Warnings</p>
              <p
                className="text-2xl font-bold text-gray-900"
                aria-label={`${validation.warnings.length} warnings`}
              >
                {validation.warnings.length}
              </p>
            </div>
          </div>
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex space-x-4" role="group" aria-label="Validation details actions">
        {validation.errors.length > 0 && (
          <button
            onClick={() => setShowErrors(!showErrors)}
            className="inline-flex items-center px-4 py-2 border border-red-300 rounded-md text-sm font-medium text-red-700 bg-red-50 hover:bg-red-100"
            aria-label={`${showErrors ? 'Hide' : 'View'} ${validation.errors.length} validation errors`}
            aria-expanded={showErrors}
          >
            <XCircle className="w-4 h-4 mr-2" aria-hidden="true" />
            View Errors ({validation.errors.length})
          </button>
        )}
        {validation.warnings.length > 0 && (
          <button
            onClick={() => setShowWarnings(!showWarnings)}
            className="inline-flex items-center px-4 py-2 border border-yellow-300 rounded-md text-sm font-medium text-yellow-700 bg-yellow-50 hover:bg-yellow-100"
            aria-label={`${showWarnings ? 'Hide' : 'View'} ${validation.warnings.length} validation warnings`}
            aria-expanded={showWarnings}
          >
            <AlertTriangle className="w-4 h-4 mr-2" aria-hidden="true" />
            View Warnings ({validation.warnings.length})
          </button>
        )}
        <button
          onClick={() => setShowPreview(!showPreview)}
          className="inline-flex items-center px-4 py-2 border border-blue-300 rounded-md text-sm font-medium text-blue-700 bg-blue-50 hover:bg-blue-100"
          aria-label={`${showPreview ? 'Hide' : 'Show'} data preview of ${validation.preview.length} records`}
          aria-expanded={showPreview}
        >
          <Eye className="w-4 h-4 mr-2" aria-hidden="true" />
          Preview Data ({validation.preview.length})
        </button>
      </div>

      {/* Error Details */}
      {showErrors && validation.errors.length > 0 && (
        <div
          className="bg-red-50 border border-red-200 rounded-md p-4"
          role="alert"
          aria-labelledby="errors-title"
        >
          <h4 id="errors-title" className="font-medium text-red-800 mb-3">
            Validation Errors
          </h4>
          <div className="space-y-2 max-h-48 overflow-y-auto" role="list">
            {validation.errors.map((error, index) => (
              <div key={index} className="text-sm" role="listitem">
                <span className="font-medium text-red-700">Row {error.row}:</span>
                {error.field && <span className="text-red-600"> [{error.field}]</span>}
                <span className="text-red-800"> {error.message}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Warning Details */}
      {showWarnings && validation.warnings.length > 0 && (
        <div
          className="bg-yellow-50 border border-yellow-200 rounded-md p-4"
          role="alert"
          aria-labelledby="warnings-title"
        >
          <h4 id="warnings-title" className="font-medium text-yellow-800 mb-3">
            Validation Warnings
          </h4>
          <div className="space-y-2 max-h-48 overflow-y-auto" role="list">
            {validation.warnings.map((warning, index) => (
              <div key={index} className="text-sm" role="listitem">
                <span className="font-medium text-yellow-700">Row {warning.row}:</span>
                {warning.field && <span className="text-yellow-600"> [{warning.field}]</span>}
                <span className="text-yellow-800"> {warning.message}</span>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Preview Data */}
      {showPreview && validation.preview.length > 0 && (
        <div
          className="bg-white border border-gray-200 rounded-md overflow-hidden"
          role="region"
          aria-labelledby="preview-title"
        >
          <div className="px-4 py-3 border-b border-gray-200 bg-gray-50">
            <h4 id="preview-title" className="font-medium text-gray-900">
              Data Preview
            </h4>
          </div>
          <div className="overflow-x-auto">
            <table
              className="min-w-full divide-y divide-gray-200"
              role="table"
              aria-label="Data preview table"
            >
              <thead className="bg-gray-50">
                <tr>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    Row
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    Email
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    First Name
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    Last Name
                  </th>
                  <th
                    scope="col"
                    className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase"
                  >
                    Roles
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {validation.preview.slice(0, 10).map((row, index) => (
                  <tr key={index}>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{row.row}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {row.email}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {row.first_name}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                      {row.last_name}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                      {row.roles ? row.roles.join(', ') : 'None'}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      {/* Action Buttons */}
      <div
        className="flex justify-end space-x-3 pt-6 border-t border-gray-200"
        role="group"
        aria-label="Import actions"
      >
        <button
          onClick={onCancel}
          className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
          aria-label="Cancel import and clear validation results"
        >
          Cancel
        </button>
        <button
          onClick={onProceed}
          disabled={validation.invalid_count > 0 || isProcessing}
          className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed"
          aria-label={
            validation.invalid_count > 0
              ? 'Cannot proceed: Fix validation errors first'
              : isProcessing
                ? 'Processing import'
                : `Proceed with importing ${validation.valid_count} valid records`
          }
        >
          {isProcessing ? (
            <>
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
              Processing...
            </>
          ) : (
            <>
              <Play className="w-4 h-4 mr-2" />
              Import {validation.valid_count} Users
            </>
          )}
        </button>
      </div>
    </div>
  );
};

const OperationsList: FC<{
  operations: BulkOperationResult[];
  onViewDetails: (operation: BulkOperationResult) => void;
  onPauseResume: (operationId: string) => void;
  onCancel: (operationId: string) => void;
  onRollback: (operationId: string) => void;
}> = ({ operations, onViewDetails, onPauseResume, onCancel, onRollback }) => {
  if (operations.length === 0) {
    return (
      <div className="text-center py-12" role="status">
        <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
        <h3 className="text-lg font-medium text-gray-900 mb-2">No bulk operations</h3>
        <p className="text-gray-600">Upload a CSV file to start importing users.</p>
      </div>
    );
  }

  return (
    <div className="space-y-4" role="list" aria-label="Bulk operations">
      {operations.map((operation) => (
        <div
          key={operation.operation_id}
          className="bg-white border border-gray-200 rounded-lg p-6"
          role="listitem"
          aria-label={`${operation.type} operation: ${operation.status}`}
        >
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-3">
              <h3 className="text-lg font-medium text-gray-900">
                {operation.type.replace('_', ' ').toUpperCase()}
              </h3>
              <StatusBadge status={operation.status} />
            </div>
            <div className="flex space-x-2" role="group" aria-label="Operation actions">
              <button
                onClick={() => onViewDetails(operation)}
                className="p-2 text-gray-400 hover:text-gray-500"
                aria-label="View operation details"
                title="View Details"
              >
                <Eye className="w-4 h-4" aria-hidden="true" />
              </button>
              {operation.status === 'running' && (
                <button
                  onClick={() => onPauseResume(operation.operation_id)}
                  className="p-2 text-yellow-600 hover:text-yellow-700"
                  aria-label="Pause operation"
                  title="Pause"
                >
                  <Pause className="w-4 h-4" aria-hidden="true" />
                </button>
              )}
              {operation.status === 'paused' && (
                <button
                  onClick={() => onPauseResume(operation.operation_id)}
                  className="p-2 text-blue-600 hover:text-blue-700"
                  aria-label="Resume operation"
                  title="Resume"
                >
                  <Play className="w-4 h-4" aria-hidden="true" />
                </button>
              )}
              {(operation.status === 'running' || operation.status === 'paused') && (
                <button
                  onClick={() => onCancel(operation.operation_id)}
                  className="p-2 text-red-600 hover:text-red-700"
                  aria-label="Cancel operation"
                  title="Cancel"
                >
                  <Square className="w-4 h-4" aria-hidden="true" />
                </button>
              )}
              {operation.status === 'completed' && operation.successful_records > 0 && (
                <button
                  onClick={() => onRollback(operation.operation_id)}
                  className="p-2 text-orange-600 hover:text-orange-700"
                  aria-label="Rollback operation"
                  title="Rollback"
                >
                  <RotateCcw className="w-4 h-4" aria-hidden="true" />
                </button>
              )}
            </div>
          </div>

          <div
            className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-4"
            role="group"
            aria-label="Operation statistics"
          >
            <div>
              <p className="text-sm text-gray-500">Total Records</p>
              <p
                className="text-lg font-semibold text-gray-900"
                aria-label={`${operation.total_records} total records`}
              >
                {operation.total_records}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Processed</p>
              <p
                className="text-lg font-semibold text-gray-900"
                aria-label={`${operation.processed_records} processed`}
              >
                {operation.processed_records}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Successful</p>
              <p
                className="text-lg font-semibold text-green-600"
                aria-label={`${operation.successful_records} successful`}
              >
                {operation.successful_records}
              </p>
            </div>
            <div>
              <p className="text-sm text-gray-500">Failed</p>
              <p
                className="text-lg font-semibold text-red-600"
                aria-label={`${operation.failed_records} failed`}
              >
                {operation.failed_records}
              </p>
            </div>
          </div>

          {operation.status === 'running' || operation.status === 'paused' ? (
            <ProgressBar
              current={operation.processed_records}
              total={operation.total_records}
              status={operation.status}
            />
          ) : (
            <div className="text-sm text-gray-500">
              <p>Created: {formatDateTime(operation.created_at)}</p>
              {operation.completed_at && <p>Completed: {formatDateTime(operation.completed_at)}</p>}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const BulkOperationsPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { toast } = useToast();

  // State
  const [operations, setOperations] = useState<BulkOperationResult[]>([]);
  const [validation, setValidation] = useState<ValidationResult | null>(null);
  // const [selectedOperation, setSelectedOperation] = useState<BulkOperationResult | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isUploading, setIsUploading] = useState(false);
  const [isValidating, setIsValidating] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [uploadProgress, setUploadProgress] = useState<UploadProgress | undefined>();

  // Check permissions
  const canManageBulkOps = hasPermission('admin') || hasPermission('users:bulk');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadOperations = async () => {
    if (!canManageBulkOps) return;

    setIsLoading(true);
    try {
      const ops = await adminService.getBulkOperations();
      setOperations(ops);
    } catch (error) {
      handleError(error, 'Failed to load bulk operations');
      toast.error('Failed to load bulk operations');
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================
  // File Upload & Validation
  // ============================================================================

  const handleFileSelect = async (file: File) => {
    setIsUploading(true);
    setUploadProgress({ loaded: 0, total: file.size, percentage: 0 });

    try {
      // Simulate upload progress
      const interval = setInterval(() => {
        setUploadProgress((prev) => {
          if (!prev) return prev;
          const newLoaded = Math.min(prev.loaded + file.size * 0.1, file.size);
          return {
            ...prev,
            loaded: newLoaded,
            percentage: Math.round((newLoaded / file.size) * 100),
          };
        });
      }, 200);

      // Simulate validation
      setTimeout(async () => {
        clearInterval(interval);
        setIsUploading(false);
        setUploadProgress(undefined);
        setIsValidating(true);

        try {
          const mockValidationResult: ValidationResult = {
            is_valid: true,
            valid_count: 2,
            invalid_count: 0,
            total_count: 2,
            errors: [],
            warnings: [],
            preview: [
              { row: 1, email: 'user1@example.com', first_name: 'John', last_name: 'Doe' },
              { row: 2, email: 'user2@example.com', first_name: 'Jane', last_name: 'Smith' },
            ],
          };
          setValidation(mockValidationResult);
          toast.success(`File validated: ${mockValidationResult.valid_count} valid records`);
        } catch (error) {
          handleError(error, 'Failed to validate file');
          toast.error('Failed to validate file');
        } finally {
          setIsValidating(false);
        }
      }, 2000);
    } catch (error) {
      handleError(error, 'Failed to upload file');
      toast.error('Failed to upload file');
      setIsUploading(false);
      setUploadProgress(undefined);
    }
  };

  // ============================================================================
  // Operation Management
  // ============================================================================

  const handleProceedWithImport = async () => {
    if (!validation) return;

    setIsProcessing(true);
    try {
      const mockOperation: BulkOperationResult = {
        operation_id: `op_${Date.now()}`,
        type: 'user_import',
        status: 'running',
        total_records: validation.valid_count,
        processed_records: 0,
        successful_records: 0,
        failed_records: 0,
        created_at: new Date().toISOString(),
        started_at: new Date().toISOString(),
        errors: [],
        warnings: [],
      };
      setOperations((prev) => [mockOperation, ...prev]);
      setValidation(null);
      toast.success('Bulk import started successfully');
    } catch (error) {
      handleError(error, 'Failed to start bulk import');
      toast.error('Failed to start bulk import');
    } finally {
      setIsProcessing(false);
    }
  };

  const handlePauseResume = async (operationId: string) => {
    try {
      await adminService.pauseResumeOperation(operationId);
      await loadOperations();
      toast.success('Operation status updated');
    } catch (error) {
      handleError(error, 'Failed to pause/resume operation');
      toast.error('Failed to pause/resume operation');
    }
  };

  const handleCancel = async (operationId: string) => {
    try {
      await adminService.cancelOperation(operationId);
      await loadOperations();
      toast.success('Operation cancelled successfully');
    } catch (error) {
      handleError(error, 'Failed to cancel operation');
      toast.error('Failed to cancel operation');
    }
  };

  const handleRollback = async (operationId: string) => {
    try {
      await adminService.rollbackOperation(operationId);
      await loadOperations();
      toast.success('Operation rolled back successfully');
    } catch (error) {
      handleError(error, 'Failed to rollback operation');
      toast.error('Failed to rollback operation');
    }
  };

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadOperations();
  }, [loadOperations]);

  // Auto-refresh operations when there are active ones
  useEffect(() => {
    const activeOperations = operations.filter(
      (op) => op.status === 'running' || op.status === 'pending'
    );

    if (activeOperations.length > 0) {
      const interval = setInterval(loadOperations, 3000);
      return () => clearInterval(interval);
    }

    // Return undefined for the case where there are no active operations
    return undefined;
  }, [operations, loadOperations]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canManageBulkOps) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Users className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to manage bulk operations.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Breadcrumb />
          <div className="mt-4 flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Bulk Operations</h1>
              <p className="text-gray-600 mt-1">Import and manage users in bulk with CSV files</p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={loadOperations}
                disabled={isLoading}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
              >
                <Download className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                Sample CSV
              </button>
            </div>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-6">
            <ErrorAlert error={error} onDismiss={clearError} />
          </div>
        )}

        {/* File Upload Section */}
        {!validation && (
          <div className="bg-white rounded-lg shadow-sm border mb-8 p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Upload User Data</h2>
            {isValidating ? (
              <div className="text-center py-12">
                <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4" />
                <p className="text-gray-600">Validating file...</p>
              </div>
            ) : (
              <FileUploadArea
                onFileSelect={handleFileSelect}
                isUploading={isUploading}
                progress={uploadProgress}
              />
            )}
          </div>
        )}

        {/* Validation Results */}
        {validation && (
          <div className="bg-white rounded-lg shadow-sm border mb-8 p-6">
            <h2 className="text-lg font-medium text-gray-900 mb-6">Validation Results</h2>
            <ValidationResults
              validation={validation}
              onProceed={handleProceedWithImport}
              onCancel={() => setValidation(null)}
              isProcessing={isProcessing}
            />
          </div>
        )}

        {/* Operations List */}
        <div
          className="bg-white rounded-lg shadow-sm border"
          role="region"
          aria-labelledby="operations-list-title"
        >
          <div className="px-6 py-4 border-b border-gray-200">
            <h2 id="operations-list-title" className="text-lg font-medium text-gray-900">
              Recent Operations
            </h2>
          </div>
          <div className="p-6">
            {isLoading ? (
              <div className="space-y-4" role="status" aria-label="Loading operations">
                <span className="sr-only">Loading bulk operations list</span>
                {Array.from({ length: 3 }).map((_, i) => (
                  <div key={i} className="border border-gray-200 rounded-lg p-6">
                    <div className="flex items-center justify-between mb-4">
                      <Skeleton className="h-6 w-32" />
                      <Skeleton className="h-6 w-20" />
                    </div>
                    <div className="grid grid-cols-4 gap-4 mb-4">
                      {Array.from({ length: 4 }).map((_, j) => (
                        <div key={j}>
                          <Skeleton className="h-4 w-16 mb-2" />
                          <Skeleton className="h-6 w-12" />
                        </div>
                      ))}
                    </div>
                    <Skeleton className="h-2 w-full" />
                  </div>
                ))}
              </div>
            ) : (
              <OperationsList
                operations={operations}
                onViewDetails={() => {}} // Placeholder for future implementation
                onPauseResume={handlePauseResume}
                onCancel={handleCancel}
                onRollback={handleRollback}
              />
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default BulkOperationsPage;
