/**
 * Admin Dashboard Page
 *
 * Comprehensive administrative dashboard providing overview of system status,
 * user statistics, pending approvals, and recent activity.
 *
 * React 19: No memoization needed - React Compiler handles optimization
 *
 * @author Generated by GitHub Copilot
 */

import {
  Activity,
  ArrowDown,
  ArrowUp,
  Clock,
  Database,
  Monitor,
  RefreshCw,
  Shield,
  UserCheck,
  Users,
} from 'lucide-react';
import { useCallback, useEffect, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useLocalization } from '@hooks/localization/useLocalization';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { Skeleton } from '@shared/ui/Skeleton';
import { formatTime } from '@shared/utils';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface AdminStats {
  total_users: number;
  active_users: number;
  pending_approvals: number;
}

interface DatabaseHealth {
  status: string;
  timestamp: string;
  connection_count: number;
  response_time: number;
}

interface SystemMetrics {
  status: string;
  timestamp: string;
  cpu_usage: number;
  memory_usage: number;
  disk_usage: number;
}

interface AuditSummary {
  total_events: number;
  events_by_severity: { [key: string]: number };
  events_by_action: { [key: string]: number };
  recent_activity: Array<{
    action: string;
    timestamp: string;
    user_id?: string;
  }>;
}

interface StatCardProps {
  title: string;
  value: number | string;
  icon: React.ReactNode;
  trend?: {
    value: number;
    isPositive: boolean;
  };
  color: 'blue' | 'green' | 'yellow' | 'red' | 'purple';
  loading?: boolean;
}

// ============================================================================
// Components
// ============================================================================

const StatCard: FC<StatCardProps> = ({ title, value, icon, trend, color, loading = false }) => {
  const colorClasses = {
    blue: 'bg-blue-50 text-blue-600 border-blue-200',
    green: 'bg-green-50 text-green-600 border-green-200',
    yellow: 'bg-yellow-50 text-yellow-600 border-yellow-200',
    red: 'bg-red-50 text-red-600 border-red-200',
    purple: 'bg-purple-50 text-purple-600 border-purple-200',
  };

  if (loading) {
    return (
      <div className="section-container">
        <Skeleton className="h-4 w-24 mb-2" />
        <Skeleton className="h-8 w-16 mb-2" />
        <Skeleton className="h-3 w-16" />
      </div>
    );
  }

  return (
    <div className="section-container">
      <div className="flex items-center">
        <div className={`p-3 rounded-lg ${colorClasses[color]}`}>{icon}</div>
        <div className="ml-4 flex-1">
          <p className="text-sm font-medium text-gray-600">{title}</p>
          <div className="flex items-end">
            <p className="text-2xl font-semibold text-gray-900">{value}</p>
            {trend && (
              <div
                className={`ml-2 flex items-center text-sm ${
                  trend.isPositive ? 'text-green-600' : 'text-red-600'
                }`}
              >
                {trend.isPositive ? (
                  <ArrowUp className="w-3 h-3" />
                ) : (
                  <ArrowDown className="w-3 h-3" />
                )}
                <span className="ml-1">{Math.abs(trend.value)}%</span>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

const HealthStatusBadge: FC<{ status: string; className?: string }> = ({
  status,
  className = '',
}) => {
  const getStatusColor = (status: string) => {
    switch (status.toLowerCase()) {
      case 'healthy':
      case 'up':
      case 'online':
        return 'bg-green-100 text-green-800';
      case 'warning':
      case 'degraded':
        return 'bg-yellow-100 text-yellow-800';
      case 'error':
      case 'down':
      case 'offline':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${getStatusColor(status)} ${className}`}
    >
      {status}
    </span>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const AdminDashboardPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { t } = useLocalization();

  // State
  const [adminStats, setAdminStats] = useState<AdminStats | null>(null);
  const [dbHealth, setDbHealth] = useState<DatabaseHealth | null>(null);
  const [systemMetrics, setSystemMetrics] = useState<SystemMetrics | null>(null);
  const [auditSummary, setAuditSummary] = useState<AuditSummary | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isRefreshing, setIsRefreshing] = useState(false);

  // Check permissions
  const canViewAdminData = hasPermission('admin') || hasPermission('admin:read');
  const canViewAuditLogs = hasPermission('audit:read') || hasPermission('admin');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================

  const loadAdminStats = useCallback(async () => {
    if (!canViewAdminData) return;

    try {
      const stats = await adminService.getStats();
      setAdminStats(stats);
    } catch (error) {
      handleError(error, 'Failed to load admin statistics');
    }
  }, [canViewAdminData, handleError]);

  const loadSystemHealth = useCallback(async () => {
    try {
      const [db, metrics] = await Promise.all([
        adminService.getDatabaseHealth(),
        adminService.getSystemHealth(),
      ]);
      setDbHealth(db);
      setSystemMetrics(metrics);
    } catch (error) {
      handleError(error, 'Failed to load system health data');
    }
  }, [handleError]);

  const loadAuditSummary = useCallback(async () => {
    if (!canViewAuditLogs) return;

    try {
      const summary = await adminService.getAuditSummary();
      setAuditSummary(summary);
    } catch (error) {
      handleError(error, 'Failed to load audit summary');
    }
  }, [canViewAuditLogs, handleError]);

  const loadAllData = useCallback(async () => {
    setIsLoading(true);
    clearError();

    try {
      await Promise.all([loadAdminStats(), loadSystemHealth(), loadAuditSummary()]);
    } finally {
      setIsLoading(false);
    }
  }, [loadAdminStats, loadSystemHealth, loadAuditSummary, clearError]);

  const handleRefresh = async () => {
    setIsRefreshing(true);
    try {
      await loadAllData();
    } finally {
      setIsRefreshing(false);
    }
  };

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadAllData();
  }, [loadAllData]);

  // Auto-refresh every 30 seconds for health data
  useEffect(() => {
    const interval = setInterval(() => {
      if (!isLoading && !isRefreshing) {
        loadSystemHealth();
      }
    }, 30000);

    return () => clearInterval(interval);
  }, [isLoading, isRefreshing, loadSystemHealth]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canViewAdminData) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">
              {t('dashboard.accessRestricted')}
            </h3>
            <p className="text-gray-600">{t('dashboard.noPermission')}</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Breadcrumb />
          <div className="mt-4 flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">{t('dashboard.title')}</h1>
              <p className="text-gray-600 mt-1">{t('dashboard.description')}</p>
            </div>
            <button
              onClick={handleRefresh}
              disabled={isRefreshing}
              className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 disabled:opacity-50"
            >
              <RefreshCw className={`w-4 h-4 mr-2 ${isRefreshing ? 'animate-spin' : ''}`} />
              {t('dashboard.refresh')}
            </button>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-6">
            <ErrorAlert error={error} onDismiss={clearError} />
          </div>
        )}

        {/* Stats Grid */}
        {adminStats && (
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <StatCard
              title={t('dashboard.totalUsers')}
              value={adminStats.total_users}
              icon={<Users className="w-6 h-6" />}
              color="blue"
              loading={isLoading}
            />
            <StatCard
              title={t('dashboard.activeUsers')}
              value={adminStats.active_users}
              icon={<UserCheck className="w-6 h-6" />}
              color="green"
              loading={isLoading}
            />
            <StatCard
              title={t('dashboard.pendingApprovals')}
              value={adminStats.pending_approvals}
              icon={<Clock className="w-6 h-6" />}
              color="yellow"
              loading={isLoading}
            />
          </div>
        )}

        {/* System Health Section */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          {/* Database Health */}
          <div className="card-white">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center">
                <Database className="w-5 h-5 text-blue-600 mr-2" />
                <h3 className="text-lg font-medium text-gray-900">
                  {t('dashboard.databaseHealth')}
                </h3>
                {dbHealth && <HealthStatusBadge status={dbHealth.status} className="ml-auto" />}
              </div>
            </div>
            <div className="p-6">
              {isLoading ? (
                <div className="space-y-3">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
              ) : dbHealth ? (
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">
                      {t('dashboard.activeConnections')}
                    </span>
                    <span className="text-sm font-medium">{dbHealth.connection_count}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">{t('dashboard.responseTime')}</span>
                    <span className="text-sm font-medium">{dbHealth.response_time}ms</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">{t('dashboard.lastCheck')}</span>
                    <span className="text-sm font-medium">{formatTime(dbHealth.timestamp)}</span>
                  </div>
                </div>
              ) : (
                <p className="text-sm text-gray-500">{t('dashboard.unableToLoadDatabaseHealth')}</p>
              )}
            </div>
          </div>

          {/* System Metrics */}
          <div className="card-white">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center">
                <Monitor className="w-5 h-5 text-green-600 mr-2" />
                <h3 className="text-lg font-medium text-gray-900">
                  {t('dashboard.systemMetrics')}
                </h3>
                {systemMetrics && (
                  <HealthStatusBadge status={systemMetrics.status} className="ml-auto" />
                )}
              </div>
            </div>
            <div className="p-6">
              {isLoading ? (
                <div className="space-y-3">
                  <Skeleton className="h-4 w-full" />
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
              ) : systemMetrics ? (
                <div className="space-y-4">
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">{t('dashboard.cpuUsage')}</span>
                    <span className="text-sm font-medium">
                      {systemMetrics.cpu_usage.toFixed(1)}%
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">{t('dashboard.memoryUsage')}</span>
                    <span className="text-sm font-medium">
                      {systemMetrics.memory_usage.toFixed(1)}%
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-sm text-gray-600">{t('dashboard.diskUsage')}</span>
                    <span className="text-sm font-medium">
                      {systemMetrics.disk_usage.toFixed(1)}%
                    </span>
                  </div>
                </div>
              ) : (
                <p className="text-sm text-gray-500">{t('dashboard.unableToLoadSystemMetrics')}</p>
              )}
            </div>
          </div>
        </div>

        {/* Recent Activity */}
        {canViewAuditLogs && auditSummary && (
          <div className="card-white">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center">
                <Activity className="w-5 h-5 text-purple-600 mr-2" />
                <h3 className="text-lg font-medium text-gray-900">
                  {t('dashboard.recentActivity')}
                </h3>
                <span className="ml-auto text-sm text-gray-500">
                  {auditSummary.total_events} {t('dashboard.totalEvents')}
                </span>
              </div>
            </div>
            <div className="p-6">
              {isLoading ? (
                <div className="space-y-3">
                  {Array.from({ length: 5 }).map((_, i) => (
                    <Skeleton key={i} className="h-4 w-full" />
                  ))}
                </div>
              ) : auditSummary.recent_activity.length > 0 ? (
                <div className="space-y-3">
                  {auditSummary.recent_activity.slice(0, 5).map((activity, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between py-2 border-b border-gray-100 last:border-0"
                    >
                      <div className="flex items-center">
                        <div className="w-2 h-2 bg-blue-400 rounded-full mr-3" />
                        <span className="text-sm text-gray-900">{activity.action}</span>
                        {activity.user_id && (
                          <span className="text-xs text-gray-500 ml-2">by {activity.user_id}</span>
                        )}
                      </div>
                      <span className="text-xs text-gray-500">
                        {formatTime(activity.timestamp)}
                      </span>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-sm text-gray-500">{t('dashboard.noRecentActivity')}</p>
              )}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AdminDashboardPage;
