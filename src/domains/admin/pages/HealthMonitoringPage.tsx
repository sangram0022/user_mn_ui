/**
 * Health Monitoring Page
 *
 * Dedicated system health dashboard with real-time metrics, service status,
 * performance indicators, and alert management.
 *
 * Note: AWS deployment handles infrastructure monitoring via CloudWatch and X-Ray.
 * This component provides UI/UX for viewing metrics with toast notifications and accessibility.
 * Actual metrics are collected by AWS services (CPU, memory, disk, network, etc.).
 *
 * @author Generated by GitHub Copilot
 */

import {
  Activity,
  AlertTriangle,
  Bell,
  CheckCircle,
  Clock,
  Cpu,
  Download,
  Eye,
  HardDrive,
  MemoryStick,
  RefreshCw,
  Settings,
  TrendingDown,
  TrendingUp,
  XCircle,
  Zap,
} from 'lucide-react';
import { useEffect, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useToast } from '@hooks/useToast';
import { Badge } from '@shared/ui/Badge';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { Skeleton } from '@shared/ui/Skeleton';
import { formatDateTime, formatTime } from '@shared/utils';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface SystemMetrics {
  cpu_usage: number;
  memory_usage: number;
  disk_usage: number;
  network_io: {
    bytes_in: number;
    bytes_out: number;
    packets_in: number;
    packets_out: number;
  };
  active_connections: number;
  response_time_avg: number;
  uptime: string;
  timestamp: string;
}

interface ServiceHealth {
  service_name: string;
  status: 'healthy' | 'degraded' | 'down' | 'maintenance';
  response_time: number;
  last_check: string;
  error_rate: number;
  uptime_percentage: number;
  dependencies: string[];
  endpoints: Array<{
    path: string;
    status: 'healthy' | 'degraded' | 'down';
    response_time: number;
  }>;
}

interface SystemAlert {
  alert_id: string;
  severity: 'critical' | 'warning' | 'info';
  title: string;
  message: string;
  service: string;
  timestamp: string;
  acknowledged: boolean;
  acknowledged_by?: string;
  resolved: boolean;
  resolved_at?: string;
}

interface PerformanceMetrics {
  requests_per_minute: number;
  average_response_time: number;
  error_rate_percentage: number;
  active_users: number;
  database_queries_per_second: number;
  cache_hit_ratio: number;
}

// ============================================================================
// Components
// ============================================================================

const StatusIndicator: FC<{ status: string; size?: 'sm' | 'md' | 'lg' }> = ({
  status,
  size = 'md',
}) => {
  const getStatusConfig = (status: string) => {
    switch (status) {
      case 'healthy':
        return { color: 'bg-green-500', icon: CheckCircle, label: 'Healthy' };
      case 'degraded':
        return { color: 'bg-yellow-500', icon: AlertTriangle, label: 'Degraded' };
      case 'down':
        return { color: 'bg-red-500', icon: XCircle, label: 'Down' };
      case 'maintenance':
        return { color: 'bg-blue-500', icon: Settings, label: 'In Maintenance' };
      default:
        return { color: 'bg-gray-500', icon: Clock, label: 'Unknown Status' };
    }
  };

  const getSizeClasses = (size: string) => {
    switch (size) {
      case 'sm':
        return 'w-2 h-2';
      case 'lg':
        return 'w-4 h-4';
      default:
        return 'w-3 h-3';
    }
  };

  const { color, label } = getStatusConfig(status);

  return (
    <div
      className={`${getSizeClasses(size)} ${color} rounded-full`}
      role="status"
      aria-label={label}
    />
  );
};

const MetricCard: FC<{
  title: string;
  value: string | number;
  unit?: string;
  trend?: 'up' | 'down' | 'stable';
  trendValue?: number;
  icon: React.ElementType;
  status?: 'good' | 'warning' | 'critical';
}> = ({ title, value, unit, trend, trendValue, icon: Icon, status = 'good' }) => {
  const getStatusColor = (status: string) => {
    switch (status) {
      case 'warning':
        return 'border-yellow-200 bg-yellow-50';
      case 'critical':
        return 'border-red-200 bg-red-50';
      default:
        return 'border-gray-200 bg-white';
    }
  };

  const getTrendColor = (trend?: string) => {
    switch (trend) {
      case 'up':
        return 'text-red-500';
      case 'down':
        return 'text-green-500';
      default:
        return 'text-gray-500';
    }
  };

  return (
    <div
      className={`p-6 rounded-lg border ${getStatusColor(status)}`}
      role="status"
      aria-label={`${title}: ${value}${unit || ''} - ${status === 'critical' ? 'Critical' : status === 'warning' ? 'Warning' : 'Normal'}`}
    >
      <div className="flex items-center justify-between">
        <div className="flex items-center">
          <Icon className="w-8 h-8 text-gray-600 mr-3" aria-hidden="true" />
          <div>
            <p className="text-sm font-medium text-gray-600">{title}</p>
            <p className="text-2xl font-bold text-gray-900">
              {value}
              {unit && <span className="text-sm font-normal text-gray-500 ml-1">{unit}</span>}
            </p>
          </div>
        </div>
        {trend && trendValue && (
          <div className={`flex items-center text-sm ${getTrendColor(trend)}`}>
            {trend === 'up' ? (
              <TrendingUp className="w-4 h-4 mr-1" aria-hidden="true" />
            ) : trend === 'down' ? (
              <TrendingDown className="w-4 h-4 mr-1" aria-hidden="true" />
            ) : null}
            <span aria-label={`Trend: ${trend}, ${Math.abs(trendValue)}%`}>
              {Math.abs(trendValue)}%
            </span>
          </div>
        )}
      </div>
    </div>
  );
};

const ServiceCard: FC<{
  service: ServiceHealth;
  onViewDetails: (service: ServiceHealth) => void;
}> = ({ service, onViewDetails }) => {
  const getStatusLabel = (status: string) => {
    switch (status) {
      case 'healthy':
        return 'Healthy';
      case 'degraded':
        return 'Degraded';
      case 'down':
        return 'Down';
      case 'maintenance':
        return 'Maintenance';
      default:
        return 'Unknown';
    }
  };

  const getStatusVariant = (
    status: string
  ): 'success' | 'warning' | 'error' | 'info' | 'default' => {
    switch (status) {
      case 'healthy':
        return 'success';
      case 'degraded':
        return 'warning';
      case 'down':
        return 'error';
      case 'maintenance':
        return 'info';
      default:
        return 'default';
    }
  };

  const getStatusIcon = (status: string) => {
    switch (status) {
      case 'healthy':
        return <CheckCircle className="w-3 h-3" />;
      case 'degraded':
        return <AlertTriangle className="w-3 h-3" />;
      case 'down':
        return <XCircle className="w-3 h-3" />;
      case 'maintenance':
        return <Settings className="w-3 h-3" />;
      default:
        return <Clock className="w-3 h-3" />;
    }
  };

  return (
    <div
      className="bg-white rounded-lg border border-gray-200 p-6 hover:shadow-md transition-shadow"
      role="article"
      aria-label={`Service: ${service.service_name} - Status: ${getStatusLabel(service.status)}`}
    >
      <div className="flex items-center justify-between mb-4">
        <div className="flex items-center space-x-3">
          <StatusIndicator status={service.status} size="md" />
          <div>
            <h3 className="text-lg font-medium text-gray-900">{service.service_name}</h3>
            <Badge
              variant={getStatusVariant(service.status)}
              icon={getStatusIcon(service.status)}
              size="sm"
            >
              {getStatusLabel(service.status)}
            </Badge>
          </div>
        </div>
        <button
          onClick={() => onViewDetails(service)}
          className="text-gray-400 hover:text-gray-500"
          aria-label={`View details for ${service.service_name}`}
        >
          <Eye className="w-5 h-5" aria-hidden="true" />
        </button>
      </div>

      <div className="grid grid-cols-2 gap-4 text-sm">
        <div>
          <p className="text-gray-500">Response Time</p>
          <p className="font-medium text-gray-900">{service.response_time}ms</p>
        </div>
        <div>
          <p className="text-gray-500">Error Rate</p>
          <p className="font-medium text-gray-900">{service.error_rate.toFixed(2)}%</p>
        </div>
        <div>
          <p className="text-gray-500">Uptime</p>
          <p className="font-medium text-gray-900">{service.uptime_percentage.toFixed(1)}%</p>
        </div>
        <div>
          <p className="text-gray-500">Last Check</p>
          <p className="font-medium text-gray-900">{formatTime(service.last_check)}</p>
        </div>
      </div>

      {service.endpoints.length > 0 && (
        <div className="mt-4 pt-4 border-t border-gray-100">
          <p className="text-sm font-medium text-gray-700 mb-2">Endpoints</p>
          <div className="space-y-1">
            {service.endpoints.slice(0, 3).map((endpoint, index) => (
              <div key={index} className="flex items-center justify-between text-sm">
                <div className="flex items-center space-x-2">
                  <StatusIndicator status={endpoint.status} size="sm" />
                  <span className="text-gray-600">{endpoint.path}</span>
                </div>
                <span className="text-gray-500">{endpoint.response_time}ms</span>
              </div>
            ))}
            {service.endpoints.length > 3 && (
              <p className="text-xs text-gray-500">+{service.endpoints.length - 3} more</p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};

const AlertCard: FC<{
  alert: SystemAlert;
  onAcknowledge: (alertId: string) => void;
  onResolve: (alertId: string) => void;
}> = ({ alert, onAcknowledge, onResolve }) => {
  const getSeverityConfig = (severity: string) => {
    switch (severity) {
      case 'critical':
        return {
          color: 'border-red-200 bg-red-50',
          badge: 'bg-red-100 text-red-800',
          icon: XCircle,
          label: 'Critical Alert',
        };
      case 'warning':
        return {
          color: 'border-yellow-200 bg-yellow-50',
          badge: 'bg-yellow-100 text-yellow-800',
          icon: AlertTriangle,
          label: 'Warning Alert',
        };
      case 'info':
        return {
          color: 'border-blue-200 bg-blue-50',
          badge: 'bg-blue-100 text-blue-800',
          icon: CheckCircle,
          label: 'Information Alert',
        };
      default:
        return {
          color: 'border-gray-200 bg-gray-50',
          badge: 'bg-gray-100 text-gray-800',
          icon: Clock,
          label: 'System Alert',
        };
    }
  };

  const { color, badge, icon: Icon, label } = getSeverityConfig(alert.severity);

  return (
    <div
      className={`p-4 rounded-lg border ${color} ${alert.acknowledged ? 'opacity-75' : ''}`}
      role={alert.severity === 'critical' ? 'alert' : 'status'}
      aria-label={`${label}: ${alert.title} from ${alert.service}`}
    >
      <div className="flex items-start justify-between">
        <div className="flex items-start space-x-3">
          <Icon className="w-5 h-5 mt-0.5 text-current" aria-hidden="true" />
          <div className="flex-1">
            <div className="flex items-center space-x-2 mb-1">
              <span
                className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${badge}`}
                role="status"
                aria-label={`Severity: ${alert.severity}`}
              >
                {alert.severity}
              </span>
              <span className="text-sm text-gray-500">{alert.service}</span>
            </div>
            <h4 className="font-medium text-gray-900 mb-1">{alert.title}</h4>
            <p className="text-sm text-gray-600 mb-2">{alert.message}</p>
            <p className="text-xs text-gray-500">
              {formatDateTime(alert.timestamp)}
              {alert.acknowledged && alert.acknowledged_by && (
                <span className="ml-2">• Acknowledged by {alert.acknowledged_by}</span>
              )}
            </p>
          </div>
        </div>
        <div className="flex space-x-2">
          {!alert.acknowledged && (
            <button
              onClick={() => onAcknowledge(alert.alert_id)}
              className="text-xs px-2 py-1 bg-gray-100 text-gray-700 rounded hover:bg-gray-200"
              aria-label={`Acknowledge ${alert.severity} alert: ${alert.title}`}
            >
              Acknowledge
            </button>
          )}
          {alert.acknowledged && !alert.resolved && (
            <button
              onClick={() => onResolve(alert.alert_id)}
              className="text-xs px-2 py-1 bg-green-100 text-green-700 rounded hover:bg-green-200"
              aria-label={`Resolve alert: ${alert.title}`}
            >
              Resolve
            </button>
          )}
        </div>
      </div>
    </div>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const HealthMonitoringPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { toast } = useToast();

  // State
  const [metrics, setMetrics] = useState<SystemMetrics | null>(null);
  const [services, setServices] = useState<ServiceHealth[]>([]);
  const [alerts, setAlerts] = useState<SystemAlert[]>([]);
  const [performance, setPerformance] = useState<PerformanceMetrics | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedService, setSelectedService] = useState<ServiceHealth | null>(null);
  const [autoRefresh, setAutoRefresh] = useState(true);

  // Check permissions
  const canViewHealth = hasPermission('admin') || hasPermission('monitoring:read');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadHealthData = async () => {
    if (!canViewHealth) return;

    try {
      const [metricsData, servicesData, alertsData, performanceData] = await Promise.all([
        adminService.getSystemMetrics(),
        adminService.getServiceHealth(),
        adminService.getSystemAlerts(),
        adminService.getPerformanceMetrics(),
      ]);

      setMetrics(metricsData);
      setServices(servicesData);
      setAlerts(alertsData);
      setPerformance(performanceData);
    } catch (error) {
      handleError(error, 'Failed to load health monitoring data');
      toast.error('Failed to load health monitoring data');
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================
  // Action Functions
  // ============================================================================

  const handleAcknowledgeAlert = async (alertId: string) => {
    try {
      await adminService.acknowledgeAlert(alertId);
      await loadHealthData();
      toast.success('Alert acknowledged successfully');
    } catch (error) {
      handleError(error, 'Failed to acknowledge alert');
      toast.error('Failed to acknowledge alert');
    }
  };

  const handleResolveAlert = async (alertId: string) => {
    try {
      await adminService.resolveAlert(alertId);
      await loadHealthData();
      toast.success('Alert resolved successfully');
    } catch (error) {
      handleError(error, 'Failed to resolve alert');
      toast.error('Failed to resolve alert');
    }
  };

  const handleExportReport = async () => {
    try {
      await adminService.exportHealthReport();
      toast.success('Health report exported successfully');
    } catch (error) {
      handleError(error, 'Failed to export health report');
      toast.error('Failed to export health report');
    }
  };

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadHealthData();
  }, [loadHealthData]);

  // Auto-refresh every 30 seconds
  useEffect(() => {
    if (!autoRefresh) return;

    const interval = setInterval(loadHealthData, 30000);
    return () => clearInterval(interval);
  }, [autoRefresh, loadHealthData]);

  // ============================================================================
  // Helper Functions
  // ============================================================================

  const getMetricStatus = (value: number, thresholds: { warning: number; critical: number }) => {
    if (value >= thresholds.critical) return 'critical';
    if (value >= thresholds.warning) return 'warning';
    return 'good';
  };

  // ============================================================================
  // Render
  // ============================================================================

  if (!canViewHealth) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Activity className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to view health monitoring.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Breadcrumb />
          <div className="mt-4 flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Health Monitoring</h1>
              <p className="text-gray-600 mt-1">
                Real-time system health and performance monitoring
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <label className="flex items-center">
                <input
                  type="checkbox"
                  checked={autoRefresh}
                  onChange={(e) => setAutoRefresh(e.target.checked)}
                  className="mr-2 rounded border-gray-300"
                  aria-label="Enable auto-refresh every 30 seconds"
                />
                <span className="text-sm text-gray-700">Auto-refresh</span>
              </label>
              <button
                onClick={handleExportReport}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
                aria-label="Export health report"
              >
                <Download className="w-4 h-4 mr-2" aria-hidden="true" />
                Export Report
              </button>
              <button
                onClick={loadHealthData}
                disabled={isLoading}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                aria-label="Refresh health data"
              >
                <RefreshCw
                  className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`}
                  aria-hidden="true"
                />
                Refresh
              </button>
            </div>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-6">
            <ErrorAlert error={error} onDismiss={clearError} />
          </div>
        )}

        {/* System Metrics */}
        <div className="mb-8" role="region" aria-label="System resource metrics">
          <h2 className="text-lg font-medium text-gray-900 mb-4">System Metrics</h2>
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              {Array.from({ length: 4 }).map((_, i) => (
                <div key={i} className="p-6 bg-white rounded-lg border border-gray-200">
                  <div className="flex items-center">
                    <Skeleton className="w-8 h-8 mr-3" />
                    <div>
                      <Skeleton className="h-4 w-20 mb-2" />
                      <Skeleton className="h-8 w-16" />
                    </div>
                  </div>
                </div>
              ))}
            </div>
          ) : metrics ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <MetricCard
                title="CPU Usage"
                value={metrics.cpu_usage}
                unit="%"
                icon={Cpu}
                status={getMetricStatus(metrics.cpu_usage, { warning: 70, critical: 90 })}
                trend={metrics.cpu_usage > 50 ? 'up' : 'down'}
                trendValue={5.2}
              />
              <MetricCard
                title="Memory Usage"
                value={metrics.memory_usage}
                unit="%"
                icon={MemoryStick}
                status={getMetricStatus(metrics.memory_usage, { warning: 80, critical: 95 })}
                trend={metrics.memory_usage > 60 ? 'up' : 'stable'}
                trendValue={2.1}
              />
              <MetricCard
                title="Disk Usage"
                value={metrics.disk_usage}
                unit="%"
                icon={HardDrive}
                status={getMetricStatus(metrics.disk_usage, { warning: 85, critical: 95 })}
                trend="stable"
              />
              <MetricCard
                title="Response Time"
                value={metrics.response_time_avg}
                unit="ms"
                icon={Zap}
                status={getMetricStatus(metrics.response_time_avg, {
                  warning: 500,
                  critical: 1000,
                })}
                trend={metrics.response_time_avg < 300 ? 'down' : 'up'}
                trendValue={12.5}
              />
            </div>
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-500">No metrics data available</p>
            </div>
          )}
        </div>

        {/* Performance Metrics */}
        {performance && (
          <div className="mb-8" role="region" aria-label="Application performance metrics">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Performance Metrics</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4">
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`${performance.requests_per_minute} requests per minute`}
              >
                <p className="text-sm text-gray-500">Requests/min</p>
                <p className="text-xl font-bold text-gray-900">{performance.requests_per_minute}</p>
              </div>
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`Average response time: ${performance.average_response_time} milliseconds`}
              >
                <p className="text-sm text-gray-500">Avg Response</p>
                <p className="text-xl font-bold text-gray-900">
                  {performance.average_response_time}ms
                </p>
              </div>
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`Error rate: ${performance.error_rate_percentage}%`}
              >
                <p className="text-sm text-gray-500">Error Rate</p>
                <p className="text-xl font-bold text-gray-900">
                  {performance.error_rate_percentage}%
                </p>
              </div>
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`${performance.active_users} active users`}
              >
                <p className="text-sm text-gray-500">Active Users</p>
                <p className="text-xl font-bold text-gray-900">{performance.active_users}</p>
              </div>
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`${performance.database_queries_per_second} database queries per second`}
              >
                <p className="text-sm text-gray-500">DB Queries/sec</p>
                <p className="text-xl font-bold text-gray-900">
                  {performance.database_queries_per_second}
                </p>
              </div>
              <div
                className="bg-white p-4 rounded-lg border"
                role="status"
                aria-label={`Cache hit ratio: ${performance.cache_hit_ratio}%`}
              >
                <p className="text-sm text-gray-500">Cache Hit Ratio</p>
                <p className="text-xl font-bold text-gray-900">{performance.cache_hit_ratio}%</p>
              </div>
            </div>
          </div>
        )}

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Services Health */}
          <div role="region" aria-label="Services health status">
            <h2 className="text-lg font-medium text-gray-900 mb-4">Services Health</h2>
            {isLoading ? (
              <div className="space-y-4">
                {Array.from({ length: 3 }).map((_, i) => (
                  <div key={i} className="bg-white rounded-lg border p-6">
                    <div className="flex items-center justify-between mb-4">
                      <div className="flex items-center space-x-3">
                        <Skeleton className="w-3 h-3 rounded-full" />
                        <Skeleton className="h-6 w-32" />
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      {Array.from({ length: 4 }).map((_, j) => (
                        <div key={j}>
                          <Skeleton className="h-4 w-20 mb-1" />
                          <Skeleton className="h-5 w-16" />
                        </div>
                      ))}
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="space-y-4">
                {services.map((service) => (
                  <ServiceCard
                    key={service.service_name}
                    service={service}
                    onViewDetails={setSelectedService}
                  />
                ))}
              </div>
            )}
          </div>

          {/* System Alerts */}
          <div role="region" aria-label="System alerts and notifications">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-lg font-medium text-gray-900">System Alerts</h2>
              {alerts.filter((a) => !a.resolved).length > 0 && (
                <span
                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"
                  role="status"
                  aria-label={`${alerts.filter((a) => !a.resolved).length} active alerts`}
                >
                  <Bell className="w-3 h-3 mr-1" aria-hidden="true" />
                  {alerts.filter((a) => !a.resolved).length} Active
                </span>
              )}
            </div>
            {isLoading ? (
              <div className="space-y-4">
                {Array.from({ length: 3 }).map((_, i) => (
                  <div key={i} className="p-4 bg-white rounded-lg border">
                    <div className="flex items-start space-x-3">
                      <Skeleton className="w-5 h-5 mt-0.5" />
                      <div className="flex-1">
                        <Skeleton className="h-4 w-24 mb-2" />
                        <Skeleton className="h-5 w-48 mb-2" />
                        <Skeleton className="h-3 w-32" />
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : alerts.length > 0 ? (
              <div className="space-y-4 max-h-96 overflow-y-auto">
                {alerts
                  .filter((alert) => !alert.resolved)
                  .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime())
                  .map((alert) => (
                    <AlertCard
                      key={alert.alert_id}
                      alert={alert}
                      onAcknowledge={handleAcknowledgeAlert}
                      onResolve={handleResolveAlert}
                    />
                  ))}
                {alerts.filter((a) => !a.resolved).length === 0 && (
                  <div className="text-center py-8">
                    <CheckCircle
                      className="w-12 h-12 text-green-500 mx-auto mb-4"
                      aria-hidden="true"
                    />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">All Clear!</h3>
                    <p className="text-gray-600">No active alerts at this time.</p>
                  </div>
                )}
              </div>
            ) : (
              <div className="text-center py-8">
                <Activity className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No Alerts</h3>
                <p className="text-gray-600">System is running smoothly.</p>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Service Details Modal */}
      {selectedService && (
        <div
          className="fixed inset-0 bg-black/50 flex items-center justify-center z-50"
          role="dialog"
          aria-modal="true"
          aria-labelledby="service-modal-title"
        >
          <div className="bg-white rounded-lg shadow-xl w-full max-w-2xl max-h-[80vh] overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <StatusIndicator status={selectedService.status} />
                  <h3 id="service-modal-title" className="text-lg font-medium text-gray-900">
                    {selectedService.service_name}
                  </h3>
                </div>
                <button
                  onClick={() => setSelectedService(null)}
                  className="text-gray-400 hover:text-gray-500"
                  aria-label="Close service details modal"
                >
                  <XCircle className="w-6 h-6" aria-hidden="true" />
                </button>
              </div>
            </div>
            <div className="px-6 py-4 overflow-y-auto">
              <div className="space-y-6">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-1">Status</h4>
                    <p className="text-sm text-gray-900">{selectedService.status}</p>
                  </div>
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-1">Response Time</h4>
                    <p className="text-sm text-gray-900">{selectedService.response_time}ms</p>
                  </div>
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-1">Error Rate</h4>
                    <p className="text-sm text-gray-900">{selectedService.error_rate}%</p>
                  </div>
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-1">Uptime</h4>
                    <p className="text-sm text-gray-900">{selectedService.uptime_percentage}%</p>
                  </div>
                </div>

                {selectedService.dependencies.length > 0 && (
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-2">Dependencies</h4>
                    <div
                      className="flex flex-wrap gap-2"
                      role="list"
                      aria-label="Service dependencies"
                    >
                      {selectedService.dependencies.map((dep, index) => (
                        <span
                          key={index}
                          className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800"
                          role="listitem"
                        >
                          {dep}
                        </span>
                      ))}
                    </div>
                  </div>
                )}

                {selectedService.endpoints.length > 0 && (
                  <div>
                    <h4 className="block text-sm font-medium text-gray-700 mb-2">Endpoints</h4>
                    <div className="space-y-2" role="list" aria-label="Service endpoints">
                      {selectedService.endpoints.map((endpoint, index) => (
                        <div
                          key={index}
                          className="flex items-center justify-between p-3 bg-gray-50 rounded-md"
                          role="listitem"
                        >
                          <div className="flex items-center space-x-2">
                            <StatusIndicator status={endpoint.status} size="sm" />
                            <span className="text-sm font-mono">{endpoint.path}</span>
                          </div>
                          <span className="text-sm text-gray-500">{endpoint.response_time}ms</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
            <div className="px-6 py-4 border-t border-gray-200 flex justify-end">
              <button
                onClick={() => setSelectedService(null)}
                className="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md hover:bg-gray-50"
                aria-label="Close modal"
              >
                Close
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default HealthMonitoringPage;
