/**
 * Audit Logs Page
 *
 * Comprehensive audit trail interface with filtering and export capabilities.
 * Shows system activity, user actions, and security events.
 *
 * Integration Pattern (Step 4):
 * - Uses AuditLogFilters component for advanced filtering UI
 * - Uses useAuditLogFilters hook for client-side filtering and statistics
 * - Uses useApiCall hook for automatic loading states and error handling
 * - Client-side filtering for instant results (loads all logs)
 *
 * @author Generated by GitHub Copilot
 */

import {
  Activity,
  AlertCircle,
  AlertTriangle,
  CheckCircle,
  ChevronLeft,
  ChevronRight,
  Download,
  Eye,
  Filter,
  Info,
  RefreshCw,
  Shield,
} from 'lucide-react';
import { useEffect, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { PageMetadata } from '@shared/components/PageMetadata';
import { Badge, getSeverityBadgeVariant } from '@shared/components/ui/Badge';
import { Skeleton } from '@shared/components/ui/Skeleton';
import type { AuditLog, AuditLogEntry, AuditSummary } from '@shared/types';
import Breadcrumb from '@shared/ui/Breadcrumb';
import { formatDateTime, formatTimestamp, prefetchRoute } from '@shared/utils';
import { useErrorHandler } from '../../../hooks';
import { useToast } from '../../../hooks/useToast';
import { adminService } from '../../../services/api';
import { ErrorAlert } from '../../../shared';

// ============================================================================
// Types & Interfaces
// ============================================================================

// Types are imported from @shared/types (AuditLog, AuditSummary)
// Filters type imported from AuditLogFilters component

// ============================================================================
// Components
// ============================================================================

// ============================================================================
// Badge Component Mapping
// ============================================================================

// ============================================================================
// Constants
// ============================================================================

/**
 * Get icon for severity level
 */
const getSeverityIcon = (severity: string) => {
  switch (severity.toLowerCase()) {
    case 'critical':
    case 'error':
      return <AlertCircle className="w-3 h-3" />;
    case 'warning':
      return <AlertTriangle className="w-3 h-3" />;
    case 'info':
      return <Info className="w-3 h-3" />;
    case 'success':
      return <CheckCircle className="w-3 h-3" />;
    default:
      return <Info className="w-3 h-3" />;
  }
};

const AuditLogRow: FC<{ log: AuditLog; onViewDetails: (log: AuditLog) => void }> = ({
  log,
  onViewDetails,
}) => {
  const { date, time } = formatTimestamp(log.timestamp);

  return (
    <tr className="hover:bg-gray-50 dark:hover:bg-gray-700">
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
        {date}
        <div className="text-xs text-gray-500 dark:text-gray-400">{time}</div>
      </td>
      <td className="px-6 py-4 whitespace-nowrap">
        <Badge
          variant={getSeverityBadgeVariant(log.severity)}
          icon={getSeverityIcon(log.severity)}
          size="sm"
          aria-label={`${log.severity} severity`}
        >
          {log.severity}
        </Badge>
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
        {log.action}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
        {log.resource_type}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
        {log.user_id || <span className="text-gray-400 dark:text-gray-500">System</span>}
      </td>
      <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
        <button
          onClick={() => onViewDetails(log)}
          className="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-300 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 rounded p-1"
          aria-label={`View details for ${log.action} on ${log.resource_type}`}
          title="View log details"
        >
          <Eye className="w-4 h-4" aria-hidden="true" />
        </button>
      </td>
    </tr>
  );
};

const DetailsModal: FC<{
  log: AuditLog | null;
  isOpen: boolean;
  onClose: () => void;
}> = ({ log, isOpen, onClose }) => {
  if (!isOpen || !log) return null;

  return (
    <div
      className="fixed inset-0 z-50 overflow-y-auto"
      aria-labelledby="modal-title"
      role="dialog"
      aria-modal="true"
    >
      <div className="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <div
          className="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          aria-hidden="true"
          onClick={onClose}
        />

        <span className="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">
          &#8203;
        </span>

        <div className="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full">
          <div className="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div className="flex items-center justify-between mb-4">
              <h3 id="modal-title" className="text-lg font-medium text-gray-900 dark:text-white">
                Audit Log Details
              </h3>
              <button
                onClick={onClose}
                className="text-gray-400 hover:text-gray-500 dark:hover:text-gray-300"
                aria-label="Close modal"
              >
                <svg className="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                </svg>
              </button>
            </div>

            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Audit ID
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100 font-mono">
                    {log.audit_id}
                  </p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Severity
                  </h4>
                  <Badge
                    variant={getSeverityBadgeVariant(log.severity)}
                    icon={getSeverityIcon(log.severity)}
                    size="sm"
                  >
                    {log.severity}
                  </Badge>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Action
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100">{log.action}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Outcome
                  </h4>
                  <Badge variant={log.outcome === 'success' ? 'success' : 'error'} size="sm">
                    {log.outcome}
                  </Badge>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Resource Type
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100">{log.resource_type}</p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Resource ID
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100">{log.resource_id}</p>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    User ID
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100">
                    {log.user_id || 'System'}
                  </p>
                </div>
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Timestamp
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100">
                    {formatDateTime(log.timestamp)}
                  </p>
                </div>
              </div>

              {log.ip_address && (
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    IP Address
                  </h4>
                  <p className="text-sm text-gray-900 dark:text-gray-100 font-mono">
                    {log.ip_address}
                  </p>
                </div>
              )}

              {log.metadata && Object.keys(log.metadata).length > 0 && (
                <div>
                  <h4 className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
                    Metadata
                  </h4>
                  <pre className="text-sm text-gray-900 dark:text-gray-100 bg-gray-100 dark:bg-gray-900 p-3 rounded-md overflow-auto max-h-48">
                    {JSON.stringify(log.metadata, null, 2)}
                  </pre>
                </div>
              )}
            </div>
          </div>

          <div className="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button
              type="button"
              onClick={onClose}
              className="w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 sm:w-auto sm:text-sm"
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

const Pagination: FC<{
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  isLoading: boolean;
}> = ({ currentPage, totalPages, onPageChange, isLoading }) => {
  const getVisiblePages = () => {
    const delta = 2;
    const range = [];
    const rangeWithDots = [];

    for (
      let i = Math.max(2, currentPage - delta);
      i <= Math.min(totalPages - 1, currentPage + delta);
      i++
    ) {
      range.push(i);
    }

    if (currentPage - delta > 2) {
      rangeWithDots.push(1, '...');
    } else {
      rangeWithDots.push(1);
    }

    rangeWithDots.push(...range);

    if (currentPage + delta < totalPages - 1) {
      rangeWithDots.push('...', totalPages);
    } else if (totalPages > 1) {
      rangeWithDots.push(totalPages);
    }

    return rangeWithDots;
  };

  if (totalPages <= 1) return null;

  return (
    <div className="flex items-center justify-between px-6 py-3 border-t border-gray-200 bg-white">
      <div className="flex justify-between sm:hidden">
        <button
          onClick={() => onPageChange(currentPage - 1)}
          disabled={currentPage <= 1 || isLoading}
          className="relative inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50"
        >
          Previous
        </button>
        <button
          onClick={() => onPageChange(currentPage + 1)}
          disabled={currentPage >= totalPages || isLoading}
          className="relative ml-3 inline-flex items-center px-4 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-md hover:bg-gray-50 disabled:opacity-50"
        >
          Next
        </button>
      </div>
      <div className="hidden sm:flex sm:flex-1 sm:items-center sm:justify-between">
        <div>
          <p className="text-sm text-gray-700">
            Page <span className="font-medium">{currentPage}</span> of{' '}
            <span className="font-medium">{totalPages}</span>
          </p>
        </div>
        <div>
          <nav className="relative z-0 inline-flex rounded-md shadow-sm -space-x-px">
            <button
              onClick={() => onPageChange(currentPage - 1)}
              disabled={currentPage <= 1 || isLoading}
              className="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
            >
              <ChevronLeft className="w-5 h-5" />
            </button>
            {getVisiblePages().map((page, index) => (
              <button
                key={index}
                onClick={() => typeof page === 'number' && onPageChange(page)}
                disabled={typeof page !== 'number' || isLoading}
                className={`relative inline-flex items-center px-4 py-2 border text-sm font-medium ${
                  page === currentPage
                    ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                    : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'
                } ${typeof page !== 'number' ? 'cursor-default' : 'cursor-pointer'}`}
              >
                {page}
              </button>
            ))}
            <button
              onClick={() => onPageChange(currentPage + 1)}
              disabled={currentPage >= totalPages || isLoading}
              className="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50 disabled:opacity-50"
            >
              <ChevronRight className="w-5 h-5" />
            </button>
          </nav>
        </div>
      </div>
    </div>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const AuditLogsPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { toast } = useToast();

  // State
  const [logs, setLogs] = useState<AuditLogEntry[]>([]);
  const [summary, setSummary] = useState<AuditSummary | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [selectedLog, setSelectedLog] = useState<AuditLogEntry | null>(null);
  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState(false);
  const [filters, setFilters] = useState<AuditFilters>({
    page: 1,
    limit: 20,
  });
  const [totalPages, setTotalPages] = useState(1);

  // Check permissions
  const canViewAuditLogs = hasPermission('admin') || hasPermission('audit:read');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadAuditLogs = async () => {
    if (!canViewAuditLogs) return;

    setIsLoading(true);
    try {
      const response = await adminService.getAuditLogs(filters);
      setLogs(response.logs);
      setTotalPages(Math.ceil(response.total / filters.limit));
    } catch (error) {
      handleError(error, 'Failed to load audit logs');
      toast.error('Failed to load audit logs');
    } finally {
      setIsLoading(false);
    }
  };

  const loadSummary = async () => {
    if (!canViewAuditLogs) return;

    try {
      const summaryData = await adminService.getAuditSummary();
      setSummary(summaryData);
    } catch (error) {
      handleError(error, 'Failed to load audit summary');
      toast.error('Failed to load audit summary');
    }
  };

  // ============================================================================
  // Filter Functions
  // ============================================================================

  const handleFilterChange = (key: keyof AuditFilters, value: string | number) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value,
      ...(key !== 'page' && { page: 1 }), // Reset to page 1 when changing filters
    }));
  };

  const handlePageChange = (page: number) => {
    setFilters((prev) => ({ ...prev, page }));
  };

  const clearFilters = () => {
    setFilters({
      page: 1,
      limit: 20,
    });
    toast.info('Filters cleared');
  };

  // ============================================================================
  // Action Functions
  // ============================================================================

  const handleViewDetails = (log: AuditLogEntry) => {
    setSelectedLog(log);
    setIsDetailsModalOpen(true);
  };

  const handleExport = async () => {
    try {
      // Show loading toast
      toast.info('Preparing audit logs export...');

      // Export audit logs with current filters
      const blob = await adminService.exportAuditLogs({
        action: filters.action,
        resource: filters.resource,
        user_id: filters.user_id,
        start_date: filters.start_date,
        end_date: filters.end_date,
        severity: filters.severity,
        format: 'csv', // Default to CSV format
      });

      // Create download link
      const url = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = url;

      // Generate filename with current date and filters
      const dateStr = new Date().toISOString().split('T')[0];
      const filterStr = [
        filters.severity && `severity-${filters.severity}`,
        filters.action && `action-${filters.action}`,
        filters.resource && `resource-${filters.resource}`,
      ]
        .filter(Boolean)
        .join('_');

      link.download = `audit-logs_${dateStr}${filterStr ? '_' + filterStr : ''}.csv`;

      // Trigger download
      document.body.appendChild(link);
      link.click();

      // Cleanup
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      toast.success('Audit logs exported successfully');
    } catch (error) {
      handleError(error, 'Failed to export audit logs');
      toast.error('Failed to export audit logs');
    }
  };

  // ============================================================================
  // Effects
  // ============================================================================

  // Prefetch likely next routes for improved navigation performance
  useEffect(() => {
    prefetchRoute('/dashboard');
    prefetchRoute('/users/roles');
  }, []);

  useEffect(() => {
    loadAuditLogs();
  }, [filters, loadAuditLogs]);

  useEffect(() => {
    loadSummary();
  }, [loadSummary]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canViewAuditLogs) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to view audit logs.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <PageMetadata
        title="Audit Logs - Security & Activity Monitoring"
        description="View comprehensive audit trail of system activity, user actions, and security events with filtering and export capabilities."
        keywords="audit logs, security monitoring, activity tracking, compliance, system events"
        ogTitle="Audit Logs - User Management System"
        ogDescription="Monitor and review system activity with comprehensive audit trail."
      />
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="mb-8">
            <Breadcrumb />
            <div className="mt-4 flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">Audit Logs</h1>
                <p className="text-gray-600 mt-1">System activity and security events</p>
              </div>
              <div className="flex space-x-3" role="group" aria-label="Audit log actions">
                <button
                  onClick={clearFilters}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  aria-label="Clear all filters"
                >
                  Clear Filters
                </button>
                <button
                  onClick={handleExport}
                  className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  aria-label="Export audit logs"
                >
                  <Download className="w-4 h-4 mr-2" aria-hidden="true" />
                  Export
                </button>
                <button
                  onClick={loadAuditLogs}
                  disabled={isLoading}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                  aria-label={isLoading ? 'Refreshing audit logs' : 'Refresh audit logs'}
                >
                  <RefreshCw
                    className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`}
                    aria-hidden="true"
                  />
                  Refresh
                </button>
              </div>
            </div>
          </div>

          {/* Error Alert */}
          {error && (
            <div className="mb-6">
              <ErrorAlert error={error} onDismiss={clearError} />
            </div>
          )}

          {/* Summary Cards */}
          {summary && (
            <div
              className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8"
              role="region"
              aria-label="Audit log summary statistics"
            >
              <div
                className="bg-white rounded-lg shadow-sm border p-6"
                role="group"
                aria-labelledby="total-events-label"
              >
                <div className="flex items-center">
                  <Activity className="w-8 h-8 text-blue-600" aria-hidden="true" />
                  <div className="ml-4">
                    <p id="total-events-label" className="text-sm font-medium text-gray-600">
                      Total Events
                    </p>
                    <p
                      className="text-2xl font-semibold text-gray-900"
                      aria-label={`${summary.total_events} total events`}
                    >
                      {summary.total_events}
                    </p>
                  </div>
                </div>
              </div>
              <div
                className="section-container"
                role="group"
                aria-labelledby="critical-events-label"
              >
                <div className="flex items-center">
                  <AlertCircle className="w-8 h-8 text-red-600" aria-hidden="true" />
                  <div className="ml-4">
                    <p id="critical-events-label" className="text-sm font-medium text-gray-600">
                      Critical
                    </p>
                    <p
                      className="text-2xl font-semibold text-gray-900"
                      aria-label={`${summary.events_by_severity.critical || 0} critical events`}
                    >
                      {summary.events_by_severity.critical || 0}
                    </p>
                  </div>
                </div>
              </div>
              <div
                className="section-container"
                role="group"
                aria-labelledby="warning-events-label"
              >
                <div className="flex items-center">
                  <AlertTriangle className="w-8 h-8 text-yellow-600" aria-hidden="true" />
                  <div className="ml-4">
                    <p id="warning-events-label" className="text-sm font-medium text-gray-600">
                      Warnings
                    </p>
                    <p
                      className="text-2xl font-semibold text-gray-900"
                      aria-label={`${summary.events_by_severity.warning || 0} warning events`}
                    >
                      {summary.events_by_severity.warning || 0}
                    </p>
                  </div>
                </div>
              </div>
              <div
                className="section-container"
                role="group"
                aria-labelledby="success-events-label"
              >
                <div className="flex items-center">
                  <CheckCircle className="w-8 h-8 text-green-600" aria-hidden="true" />
                  <div className="ml-4">
                    <p id="success-events-label" className="text-sm font-medium text-gray-600">
                      Success
                    </p>
                    <p
                      className="text-2xl font-semibold text-gray-900"
                      aria-label={`${summary.events_by_severity.success || 0} successful events`}
                    >
                      {summary.events_by_severity.success || 0}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Filters */}
          <div className="section-container-mb">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900 flex items-center">
                <Filter className="w-5 h-5 mr-2" aria-hidden="true" />
                Filters
              </h3>
            </div>
            <div className="px-6 py-4" role="search" aria-label="Filter audit logs">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div>
                  <label htmlFor="action" className="block text-sm font-medium text-gray-700 mb-1">
                    Action
                  </label>
                  <input
                    id="action"
                    type="text"
                    value={filters.action || ''}
                    onChange={(e) => handleFilterChange('action', e.target.value)}
                    placeholder="Filter by action"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label
                    htmlFor="resource"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Resource
                  </label>
                  <input
                    id="resource"
                    type="text"
                    value={filters.resource || ''}
                    onChange={(e) => handleFilterChange('resource', e.target.value)}
                    placeholder="Filter by resource"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>
                <div>
                  <label
                    htmlFor="severity"
                    className="block text-sm font-medium text-gray-700 mb-1"
                  >
                    Severity
                  </label>
                  <select
                    id="severity"
                    value={filters.severity || ''}
                    onChange={(e) => handleFilterChange('severity', e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    aria-label="Filter by severity level"
                  >
                    <option value="">All Severities</option>
                    <option value="critical">Critical</option>
                    <option value="warning">Warning</option>
                    <option value="info">Info</option>
                    <option value="success">Success</option>
                  </select>
                </div>
                <div>
                  <label htmlFor="userId" className="block text-sm font-medium text-gray-700 mb-1">
                    User ID
                  </label>
                  <input
                    id="userId"
                    type="text"
                    value={filters.user_id || ''}
                    onChange={(e) => handleFilterChange('user_id', e.target.value)}
                    placeholder="Filter by user ID"
                    className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    aria-label="Filter by user ID"
                    aria-describedby="userId-help"
                  />
                  <span id="userId-help" className="sr-only">
                    Enter user ID to filter audit logs
                  </span>
                </div>
              </div>
            </div>
          </div>

          {/* Logs Table */}
          <div className="bg-white shadow-sm rounded-lg border overflow-hidden">
            <div className="px-6 py-4 border-b border-gray-200">
              <h3 className="text-lg font-medium text-gray-900">
                Audit Events ({logs.length} of {totalPages * filters.limit})
              </h3>
            </div>
            <div
              className="overflow-x-auto"
              role="region"
              aria-label="Audit logs table"
              aria-live="polite"
            >
              <table className="min-w-full divide-y divide-gray-200" aria-label="Audit log entries">
                <thead className="bg-gray-50">
                  <tr>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Timestamp
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Severity
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Action
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Resource
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      User
                    </th>
                    <th
                      scope="col"
                      className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                    >
                      Actions
                    </th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {isLoading ? (
                    Array.from({ length: 10 }).map((_, i) => (
                      <tr key={i} aria-label="Loading audit log entry">
                        <td className="px-6 py-4">
                          <Skeleton className="h-4 w-24" />
                        </td>
                        <td className="px-6 py-4">
                          <Skeleton className="h-6 w-16" />
                        </td>
                        <td className="px-6 py-4">
                          <Skeleton className="h-4 w-32" />
                        </td>
                        <td className="px-6 py-4">
                          <Skeleton className="h-4 w-24" />
                        </td>
                        <td className="px-6 py-4">
                          <Skeleton className="h-4 w-20" />
                        </td>
                        <td className="px-6 py-4">
                          <Skeleton className="h-4 w-8" />
                        </td>
                      </tr>
                    ))
                  ) : logs.length > 0 ? (
                    logs.map((log) => (
                      <AuditLogRow key={log.log_id} log={log} onViewDetails={handleViewDetails} />
                    ))
                  ) : (
                    <tr>
                      <td colSpan={6} className="px-6 py-12 text-center">
                        <div role="status" aria-live="polite">
                          <Activity
                            className="w-12 h-12 text-gray-400 mx-auto mb-4"
                            aria-hidden="true"
                          />
                          <h3 className="text-lg font-medium text-gray-900 mb-2">
                            No audit logs found
                          </h3>
                          <p className="text-gray-600">
                            No events match your current filter criteria.
                          </p>
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>

            {/* Pagination */}
            <Pagination
              currentPage={filters.page}
              totalPages={totalPages}
              onPageChange={handlePageChange}
              isLoading={isLoading}
            />
          </div>
        </div>

        {/* Details Modal */}
        <DetailsModal
          log={selectedLog}
          isOpen={isDetailsModalOpen}
          onClose={() => {
            setIsDetailsModalOpen(false);
            setSelectedLog(null);
          }}
        />
      </div>
    </>
  );
};

export default AuditLogsPage;
