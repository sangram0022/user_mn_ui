/**
 * GDPR Compliance Page
 *
 * Data export and account deletion self-service with proper consent tracking
 * and audit trails for GDPR compliance management.
 *
 * Note: AWS deployment handles infrastructure monitoring via CloudWatch.
 * This component focuses on UI/UX with toast notifications and accessibility.
 *
 * @author Generated by GitHub Copilot
 */

import {
  AlertTriangle,
  CheckCircle,
  Clock,
  Download,
  Eye,
  FileText,
  RefreshCw,
  Search,
  Shield,
  Trash2,
  User,
  XCircle,
} from 'lucide-react';
import { useEffect, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useToast } from '@hooks/useToast';
import { PageMetadata } from '@shared/components/PageMetadata';
import { Modal, ModalFooter } from '@shared/components/ui/Modal';
import { Skeleton } from '@shared/components/ui/Skeleton';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { formatDate } from '@shared/utils';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface DataExportRequest {
  request_id: string;
  user_id: string;
  email: string;
  request_type: 'personal_data' | 'activity_log' | 'full_profile';
  status: 'pending' | 'processing' | 'ready' | 'downloaded' | 'expired' | 'failed';
  created_at: string;
  processed_at?: string;
  expires_at?: string;
  download_url?: string;
  file_size?: number;
}

interface DeletionRequest {
  request_id: string;
  user_id: string;
  email: string;
  reason: string;
  status: 'pending' | 'approved' | 'processing' | 'completed' | 'rejected' | 'cancelled';
  created_at: string;
  scheduled_date?: string;
  completed_at?: string;
  approved_by?: string;
  rejection_reason?: string;
  consent_confirmed: boolean;
  data_retention_period: number;
}

interface ConsentRecord {
  consent_id: string;
  user_id: string;
  email: string;
  consent_type: 'data_processing' | 'marketing' | 'analytics' | 'cookies';
  granted: boolean;
  granted_at?: string;
  withdrawn_at?: string;
  ip_address: string;
  user_agent: string;
  legal_basis: string;
}

interface GDPRStats {
  total_export_requests: number;
  pending_exports: number;
  total_deletion_requests: number;
  pending_deletions: number;
  active_consents: number;
  withdrawn_consents: number;
}

// ============================================================================
// Components
// ============================================================================

const StatusBadge: FC<{ status: string; type: 'export' | 'deletion' }> = ({ status, type }) => {
  const getStatusConfig = (status: string, type: string) => {
    if (type === 'export') {
      switch (status) {
        case 'pending':
          return {
            color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
            icon: Clock,
            label: 'Pending',
          };
        case 'processing':
          return {
            color: 'bg-blue-100 text-blue-800 border-blue-200',
            icon: RefreshCw,
            label: 'Processing',
          };
        case 'ready':
          return {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: CheckCircle,
            label: 'Ready',
          };
        case 'downloaded':
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: Download,
            label: 'Downloaded',
          };
        case 'expired':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: XCircle,
            label: 'Expired',
          };
        case 'failed':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: XCircle,
            label: 'Failed',
          };
        default:
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: Clock,
            label: 'Unknown',
          };
      }
    } else {
      switch (status) {
        case 'pending':
          return {
            color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
            icon: Clock,
            label: 'Pending',
          };
        case 'approved':
          return {
            color: 'bg-blue-100 text-blue-800 border-blue-200',
            icon: CheckCircle,
            label: 'Approved',
          };
        case 'processing':
          return {
            color: 'bg-blue-100 text-blue-800 border-blue-200',
            icon: RefreshCw,
            label: 'Processing',
          };
        case 'completed':
          return {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: CheckCircle,
            label: 'Completed',
          };
        case 'rejected':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: XCircle,
            label: 'Rejected',
          };
        case 'cancelled':
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: XCircle,
            label: 'Cancelled',
          };
        default:
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: Clock,
            label: 'Unknown',
          };
      }
    }
  };

  const { color, icon: Icon, label } = getStatusConfig(status, type);

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${color}`}
      role="status"
      aria-label={`${type === 'export' ? 'Export' : 'Deletion'} request status: ${label}`}
    >
      <Icon className="w-3 h-3 mr-1" aria-hidden="true" />
      {status}
    </span>
  );
};

const ExportRequestsTable: FC<{
  requests: DataExportRequest[];
  onDownload: (requestId: string) => void;
  onViewDetails: (request: DataExportRequest) => void;
  isLoading: boolean;
}> = ({ requests, onDownload, onViewDetails, isLoading }) => {
  if (isLoading) {
    return (
      <div className="overflow-x-auto">
        <table
          className="min-w-full divide-y divide-gray-200"
          role="table"
          aria-label="Data export requests"
        >
          <thead className="bg-gray-50">
            <tr>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                User
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Type
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Status
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Created
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Expires
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {Array.from({ length: 5 }).map((_, i) => (
              <tr key={i}>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-32" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-24" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-6 w-20" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-28" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-28" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-8 w-20" />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto">
      <table
        className="min-w-full divide-y divide-gray-200"
        role="table"
        aria-label="Data export requests"
      >
        <thead className="bg-gray-50">
          <tr>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              User
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Type
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Status
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Created
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Expires
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {requests.length > 0 ? (
            requests.map((request) => (
              <tr key={request.request_id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <User className="w-4 h-4 text-gray-400 mr-2" aria-hidden="true" />
                    <div>
                      <div className="text-sm font-medium text-gray-900">{request.email}</div>
                      <div className="text-sm text-gray-500">{request.user_id}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {request.request_type.replace('_', ' ')}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <StatusBadge status={request.status} type="export" />
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {formatDate(request.created_at)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {request.expires_at ? formatDate(request.expires_at) : 'N/A'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => onViewDetails(request)}
                      className="text-blue-600 hover:text-blue-900"
                      aria-label={`View details for export request by ${request.email}`}
                    >
                      <Eye className="w-4 h-4" aria-hidden="true" />
                    </button>
                    {request.status === 'ready' && request.download_url && (
                      <button
                        onClick={() => onDownload(request.request_id)}
                        className="text-green-600 hover:text-green-900"
                        aria-label={`Download export file for ${request.email}`}
                      >
                        <Download className="w-4 h-4" aria-hidden="true" />
                      </button>
                    )}
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={6} className="px-6 py-12 text-center">
                <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No export requests</h3>
                <p className="text-gray-600">No data export requests have been made.</p>
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  );
};

const DeletionRequestsTable: FC<{
  requests: DeletionRequest[];
  onApprove: (requestId: string) => void;
  onReject: (requestId: string, reason: string) => void;
  onViewDetails: (request: DeletionRequest) => void;
  isLoading: boolean;
}> = ({ requests, onApprove, onReject, onViewDetails, isLoading }) => {
  const [rejectingId, setRejectingId] = useState<string | null>(null);
  const [rejectionReason, setRejectionReason] = useState('');

  const handleReject = (requestId: string) => {
    if (rejectionReason.trim()) {
      onReject(requestId, rejectionReason);
      setRejectingId(null);
      setRejectionReason('');
    }
  };

  if (isLoading) {
    return (
      <div className="overflow-x-auto">
        <table
          className="min-w-full divide-y divide-gray-200"
          role="table"
          aria-label="Account deletion requests"
        >
          <thead className="bg-gray-50">
            <tr>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                User
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Reason
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Status
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Created
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Consent
              </th>
              <th
                scope="col"
                className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
              >
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {Array.from({ length: 5 }).map((_, i) => (
              <tr key={i}>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-32" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-40" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-6 w-20" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-4 w-28" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-6 w-16" />
                </td>
                <td className="px-6 py-4">
                  <Skeleton className="h-8 w-20" />
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    );
  }

  return (
    <div className="overflow-x-auto">
      <table
        className="min-w-full divide-y divide-gray-200"
        role="table"
        aria-label="Account deletion requests"
      >
        <thead className="bg-gray-50">
          <tr>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              User
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Reason
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Status
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Created
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Consent
            </th>
            <th
              scope="col"
              className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
            >
              Actions
            </th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {requests.length > 0 ? (
            requests.map((request) => (
              <tr key={request.request_id} className="hover:bg-gray-50">
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <User className="w-4 h-4 text-gray-400 mr-2" aria-hidden="true" />
                    <div>
                      <div className="text-sm font-medium text-gray-900">{request.email}</div>
                      <div className="text-sm text-gray-500">{request.user_id}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 text-sm text-gray-900 max-w-xs truncate">
                  {request.reason}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  <StatusBadge status={request.status} type="deletion" />
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {formatDate(request.created_at)}
                </td>
                <td className="px-6 py-4 whitespace-nowrap">
                  {request.consent_confirmed ? (
                    <CheckCircle
                      className="w-5 h-5 text-green-500"
                      aria-label="Consent confirmed"
                    />
                  ) : (
                    <XCircle className="w-5 h-5 text-red-500" aria-label="Consent not confirmed" />
                  )}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                  <div className="flex justify-end space-x-2">
                    <button
                      onClick={() => onViewDetails(request)}
                      className="text-blue-600 hover:text-blue-900"
                      aria-label={`View details for deletion request by ${request.email}`}
                    >
                      <Eye className="w-4 h-4" aria-hidden="true" />
                    </button>
                    {request.status === 'pending' && (
                      <>
                        <button
                          onClick={() => onApprove(request.request_id)}
                          className="text-green-600 hover:text-green-900"
                          aria-label={`Approve deletion request for ${request.email}`}
                        >
                          <CheckCircle className="w-4 h-4" aria-hidden="true" />
                        </button>
                        <button
                          onClick={() => setRejectingId(request.request_id)}
                          className="text-red-600 hover:text-red-900"
                          aria-label={`Reject deletion request for ${request.email}`}
                        >
                          <XCircle className="w-4 h-4" aria-hidden="true" />
                        </button>
                      </>
                    )}
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan={6} className="px-6 py-12 text-center">
                <Trash2 className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                <h3 className="text-lg font-medium text-gray-900 mb-2">No deletion requests</h3>
                <p className="text-gray-600">No account deletion requests have been made.</p>
              </td>
            </tr>
          )}
        </tbody>
      </table>

      {/* Rejection Modal */}
      <Modal
        isOpen={Boolean(rejectingId)}
        onClose={() => {
          setRejectingId(null);
          setRejectionReason('');
        }}
        title="Reject Deletion Request"
        size="md"
        footer={
          <ModalFooter
            secondaryAction={
              <button
                onClick={() => {
                  setRejectingId(null);
                  setRejectionReason('');
                }}
                className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
              >
                Cancel
              </button>
            }
            primaryAction={
              <button
                onClick={() => rejectingId && handleReject(rejectingId)}
                disabled={!rejectionReason.trim()}
                className="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 disabled:opacity-50"
              >
                Reject Request
              </button>
            }
          />
        }
      >
        <label htmlFor="rejectionReason" className="block text-sm font-medium text-gray-700 mb-2">
          Reason for rejection
        </label>
        <textarea
          id="rejectionReason"
          rows={4}
          value={rejectionReason}
          onChange={(e) => setRejectionReason(e.target.value)}
          placeholder="Explain why this deletion request is being rejected..."
          className="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
        />
      </Modal>
    </div>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const GDPRCompliancePage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { toast } = useToast();

  // State
  const [exportRequests, setExportRequests] = useState<DataExportRequest[]>([]);
  const [deletionRequests, setDeletionRequests] = useState<DeletionRequest[]>([]);
  const [consentRecords, setConsentRecords] = useState<ConsentRecord[]>([]);
  const [stats, setStats] = useState<GDPRStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'exports' | 'deletions' | 'consents'>('exports');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');

  // Check permissions
  const canManageGDPR = hasPermission('admin') || hasPermission('gdpr:manage');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadGDPRData = async () => {
    if (!canManageGDPR) return;

    setIsLoading(true);
    try {
      const [exports, deletions, consents, gdprStats] = await Promise.all([
        adminService.getDataExportRequests(),
        adminService.getDeletionRequests(),
        adminService.getConsentRecords(),
        adminService.getGDPRStats(),
      ]);

      setExportRequests(exports);
      setDeletionRequests(deletions);
      setConsentRecords(consents);
      setStats(gdprStats);
    } catch (error) {
      handleError(error, 'Failed to load GDPR data');
      toast.error('Failed to load GDPR data');
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================
  // Action Functions
  // ============================================================================

  const handleDownloadExport = async (requestId: string) => {
    try {
      await adminService.downloadDataExport(requestId);
      toast.success('Data export downloaded successfully');
    } catch (error) {
      handleError(error, 'Failed to download export');
      toast.error('Failed to download export');
    }
  };

  const handleApproveDeletion = async (requestId: string) => {
    try {
      await adminService.approveDeletionRequest(requestId);
      await loadGDPRData();
      toast.success('Deletion request approved');
    } catch (error) {
      handleError(error, 'Failed to approve deletion request');
      toast.error('Failed to approve deletion request');
    }
  };

  const handleRejectDeletion = async (requestId: string, reason: string) => {
    try {
      await adminService.rejectDeletionRequest(requestId, reason);
      await loadGDPRData();
      toast.success('Deletion request rejected');
    } catch (error) {
      handleError(error, 'Failed to reject deletion request');
      toast.error('Failed to reject deletion request');
    }
  };

  // ============================================================================
  // Filter Functions
  // ============================================================================

  const filteredExportRequests = exportRequests.filter((request) => {
    const matchesSearch =
      request.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.user_id.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const filteredDeletionRequests = deletionRequests.filter((request) => {
    const matchesSearch =
      request.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.user_id.toLowerCase().includes(searchTerm.toLowerCase()) ||
      request.reason.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;
    return matchesSearch && matchesStatus;
  });

  const filteredConsentRecords = consentRecords.filter((record) => {
    const matchesSearch =
      record.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
      record.user_id.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesSearch;
  });

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadGDPRData();
  }, [loadGDPRData]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canManageGDPR) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to manage GDPR compliance.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <>
      <PageMetadata
        title="GDPR Compliance Center"
        description="Manage data export, deletion, and consent workflows to keep your organization compliant with GDPR mandates."
        keywords="gdpr compliance, data export requests, account deletion, consent management"
      />
      <div className="min-h-screen bg-gray-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Header */}
          <div className="mb-8">
            <Breadcrumb />
            <div className="mt-4 flex items-center justify-between">
              <div>
                <h1 className="text-2xl font-bold text-gray-900">GDPR Compliance</h1>
                <p className="text-gray-600 mt-1">
                  Data protection and privacy compliance management
                </p>
              </div>
              <div className="flex space-x-3">
                <button
                  onClick={loadGDPRData}
                  disabled={isLoading}
                  className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
                >
                  <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                  Refresh
                </button>
              </div>
            </div>
          </div>

          {/* Error Alert */}
          {error && (
            <div className="mb-6">
              <ErrorAlert error={error} onDismiss={clearError} />
            </div>
          )}

          {/* Stats Cards */}
          {stats && (
            <div
              className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8"
              role="region"
              aria-label="GDPR statistics summary"
            >
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.total_export_requests} export requests`}
              >
                <div className="flex items-center">
                  <Download className="w-6 h-6 text-blue-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Export Requests</p>
                    <p className="text-lg font-semibold text-gray-900">
                      {stats.total_export_requests}
                    </p>
                  </div>
                </div>
              </div>
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.pending_exports} pending export requests`}
              >
                <div className="flex items-center">
                  <Clock className="w-6 h-6 text-yellow-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Pending Exports</p>
                    <p className="text-lg font-semibold text-gray-900">{stats.pending_exports}</p>
                  </div>
                </div>
              </div>
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.total_deletion_requests} deletion requests`}
              >
                <div className="flex items-center">
                  <Trash2 className="w-6 h-6 text-red-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Deletion Requests</p>
                    <p className="text-lg font-semibold text-gray-900">
                      {stats.total_deletion_requests}
                    </p>
                  </div>
                </div>
              </div>
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.pending_deletions} pending deletion requests`}
              >
                <div className="flex items-center">
                  <AlertTriangle className="w-6 h-6 text-orange-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Pending Deletions</p>
                    <p className="text-lg font-semibold text-gray-900">{stats.pending_deletions}</p>
                  </div>
                </div>
              </div>
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.active_consents} active consents`}
              >
                <div className="flex items-center">
                  <CheckCircle className="w-6 h-6 text-green-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Active Consents</p>
                    <p className="text-lg font-semibold text-gray-900">{stats.active_consents}</p>
                  </div>
                </div>
              </div>
              <div
                className="bg-white rounded-lg shadow-sm border p-4"
                role="status"
                aria-label={`${stats.withdrawn_consents} withdrawn consents`}
              >
                <div className="flex items-center">
                  <XCircle className="w-6 h-6 text-gray-600 mr-3" aria-hidden="true" />
                  <div>
                    <p className="text-xs font-medium text-gray-600">Withdrawn</p>
                    <p className="text-lg font-semibold text-gray-900">
                      {stats.withdrawn_consents}
                    </p>
                  </div>
                </div>
              </div>
            </div>
          )}

          {/* Tabs and Filters */}
          <div className="bg-white rounded-lg shadow-sm border mb-6">
            <div className="border-b border-gray-200">
              <div className="flex items-center justify-between px-6 py-4">
                <div role="tablist" aria-label="GDPR data categories">
                  <nav className="-mb-px flex space-x-8">
                    <button
                      onClick={() => setActiveTab('exports')}
                      role="tab"
                      aria-selected={activeTab === 'exports'}
                      aria-controls="exports-panel"
                      className={`py-2 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'exports'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Data Export Requests
                    </button>
                    <button
                      onClick={() => setActiveTab('deletions')}
                      role="tab"
                      aria-selected={activeTab === 'deletions'}
                      aria-controls="deletions-panel"
                      className={`py-2 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'deletions'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Deletion Requests
                    </button>
                    <button
                      onClick={() => setActiveTab('consents')}
                      role="tab"
                      aria-selected={activeTab === 'consents'}
                      aria-controls="consents-panel"
                      className={`py-2 px-1 border-b-2 font-medium text-sm ${
                        activeTab === 'consents'
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      Consent Records
                    </button>
                  </nav>
                </div>

                <div className="flex space-x-4">
                  <div className="relative" role="search">
                    <Search
                      className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                      aria-hidden="true"
                    />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      aria-label="Search GDPR records"
                      className="pl-10 pr-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  {activeTab !== 'consents' && (
                    <select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      aria-label="Filter by status"
                      className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Statuses</option>
                      <option value="pending">Pending</option>
                      <option value="processing">Processing</option>
                      <option value="ready">Ready</option>
                      <option value="completed">Completed</option>
                      <option value="failed">Failed</option>
                    </select>
                  )}
                </div>
              </div>
            </div>

            {/* Tab Content */}
            <div className="p-6">
              {activeTab === 'exports' && (
                <div role="tabpanel" id="exports-panel" aria-labelledby="exports-tab">
                  <ExportRequestsTable
                    requests={filteredExportRequests}
                    onDownload={handleDownloadExport}
                    onViewDetails={() => {}}
                    isLoading={isLoading}
                  />
                </div>
              )}

              {activeTab === 'deletions' && (
                <div role="tabpanel" id="deletions-panel" aria-labelledby="deletions-tab">
                  <DeletionRequestsTable
                    requests={filteredDeletionRequests}
                    onApprove={handleApproveDeletion}
                    onReject={handleRejectDeletion}
                    onViewDetails={() => {}}
                    isLoading={isLoading}
                  />
                </div>
              )}

              {activeTab === 'consents' && (
                <div role="tabpanel" id="consents-panel" aria-labelledby="consents-tab">
                  <div
                    className="overflow-x-auto"
                    role="region"
                    aria-label="Consent management records"
                  >
                    {isLoading ? (
                      <div className="space-y-4">
                        {Array.from({ length: 5 }).map((_, i) => (
                          <div
                            key={i}
                            className="flex items-center justify-between p-4 border border-gray-200 rounded-lg"
                            role="status"
                            aria-label="Loading consent record"
                          >
                            <div className="flex items-center space-x-4">
                              <Skeleton className="h-10 w-10 rounded-full" />
                              <div>
                                <Skeleton className="h-4 w-32 mb-2" />
                                <Skeleton className="h-3 w-24" />
                              </div>
                            </div>
                            <Skeleton className="h-6 w-20" />
                          </div>
                        ))}
                      </div>
                    ) : (
                      <div className="space-y-4">
                        {filteredConsentRecords.length > 0 ? (
                          filteredConsentRecords.map((record) => (
                            <div
                              key={record.consent_id}
                              className="flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50"
                            >
                              <div className="flex items-center space-x-4">
                                <User className="w-10 h-10 text-gray-400" aria-hidden="true" />
                                <div>
                                  <div className="font-medium text-gray-900">{record.email}</div>
                                  <div className="text-sm text-gray-500">
                                    {record.consent_type} {record.legal_basis}
                                  </div>
                                </div>
                              </div>
                              <div className="flex items-center space-x-3">
                                {record.granted ? (
                                  <span
                                    className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800"
                                    role="status"
                                    aria-label={`Consent granted on ${formatDate(record.granted_at!)}`}
                                  >
                                    <CheckCircle className="w-3 h-3 mr-1" aria-hidden="true" />
                                    Granted
                                  </span>
                                ) : (
                                  <span
                                    className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800"
                                    role="status"
                                    aria-label={`Consent withdrawn on ${formatDate(record.withdrawn_at!)}`}
                                  >
                                    <XCircle className="w-3 h-3 mr-1" aria-hidden="true" />
                                    Withdrawn
                                  </span>
                                )}
                                <div className="text-sm text-gray-500">
                                  {record.granted
                                    ? formatDate(record.granted_at!)
                                    : formatDate(record.withdrawn_at!)}
                                </div>
                              </div>
                            </div>
                          ))
                        ) : (
                          <div className="text-center py-12">
                            <Shield
                              className="w-12 h-12 text-gray-400 mx-auto mb-4"
                              aria-hidden="true"
                            />
                            <h3 className="text-lg font-medium text-gray-900 mb-2">
                              No consent records
                            </h3>
                            <p className="text-gray-600">
                              No consent records match your search criteria.
                            </p>
                          </div>
                        )}
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default GDPRCompliancePage;
