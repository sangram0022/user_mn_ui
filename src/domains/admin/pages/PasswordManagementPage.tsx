/**
 * Password Management Page
 *
 * Enhanced password reset and change functionality with security policies,
 * breach detection, and audit logging for administrative password management.
 *
 * Note: AWS deployment handles infrastructure monitoring via CloudWatch.
 * This component focuses on UI/UX with toast notifications and accessibility.
 *
 * @author Generated by GitHub Copilot
 */

import {
  AlertTriangle,
  CheckCircle,
  Clock,
  Key,
  Lock,
  RefreshCw,
  Search,
  Settings,
  Shield,
  Unlock,
  User,
  XCircle,
} from 'lucide-react';
import { useEffect, useState, type FC } from 'react';

import { useAuth } from '@domains/auth/context/AuthContext';
import { useErrorHandler } from '@hooks/errors/useErrorHandler';
import { useToast } from '@hooks/useToast';
import Breadcrumb from '@shared/ui/Breadcrumb';
import ErrorAlert from '@shared/ui/ErrorAlert';
import { Modal, ModalFooter } from '@shared/components/ui/Modal';
import { Skeleton } from '@shared/components/ui/Skeleton';
import { adminService } from '../../../services/admin-backend.service';

// ============================================================================
// Types & Interfaces
// ============================================================================

interface PasswordPolicy {
  min_length: number;
  require_uppercase: boolean;
  require_lowercase: boolean;
  require_numbers: boolean;
  require_special_chars: boolean;
  max_age_days: number;
  history_count: number;
  lockout_attempts: number;
  lockout_duration_minutes: number;
}

interface UserPasswordStatus {
  user_id: string;
  email: string;
  last_password_change: string;
  password_age_days: number;
  failed_login_attempts: number;
  account_locked: boolean;
  locked_until?: string;
  password_strength: 'weak' | 'fair' | 'good' | 'strong';
  breach_detected: boolean;
  force_password_change: boolean;
}

interface PasswordStats {
  total_users: number;
  users_with_weak_passwords: number;
  users_with_expired_passwords: number;
  locked_accounts: number;
  recent_breaches_detected: number;
  pending_reset_requests: number;
}

// ============================================================================
// Components
// ============================================================================

const StatusBadge: FC<{ status: string; type: 'reset' | 'security' | 'strength' | 'lock' }> = ({
  status,
  type,
}) => {
  const getStatusConfig = (status: string, type: string) => {
    if (type === 'reset') {
      switch (status) {
        case 'pending':
          return {
            color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
            icon: Clock,
            label: 'Pending',
          };
        case 'used':
          return {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: CheckCircle,
            label: 'Used',
          };
        case 'expired':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: XCircle,
            label: 'Expired',
          };
        case 'cancelled':
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: XCircle,
            label: 'Cancelled',
          };
        default:
          return { color: 'bg-gray-100 text-gray-800 border-gray-200', icon: Clock, label: status };
      }
    } else if (type === 'strength') {
      switch (status) {
        case 'strong':
          return {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: Shield,
            label: 'Strong',
          };
        case 'good':
          return {
            color: 'bg-blue-100 text-blue-800 border-blue-200',
            icon: Shield,
            label: 'Good',
          };
        case 'fair':
          return {
            color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
            icon: AlertTriangle,
            label: 'Fair',
          };
        case 'weak':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: AlertTriangle,
            label: 'Weak',
          };
        default:
          return {
            color: 'bg-gray-100 text-gray-800 border-gray-200',
            icon: Shield,
            label: status,
          };
      }
    } else if (type === 'lock') {
      return status === 'locked'
        ? { color: 'bg-red-100 text-red-800 border-red-200', icon: Lock, label: 'Locked' }
        : {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: Unlock,
            label: 'Unlocked',
          };
    } else {
      switch (status) {
        case 'critical':
          return {
            color: 'bg-red-100 text-red-800 border-red-200',
            icon: XCircle,
            label: 'Critical',
          };
        case 'high':
          return {
            color: 'bg-orange-100 text-orange-800 border-orange-200',
            icon: AlertTriangle,
            label: 'High',
          };
        case 'medium':
          return {
            color: 'bg-yellow-100 text-yellow-800 border-yellow-200',
            icon: AlertTriangle,
            label: 'Medium',
          };
        case 'low':
          return {
            color: 'bg-green-100 text-green-800 border-green-200',
            icon: CheckCircle,
            label: 'Low',
          };
        default:
          return { color: 'bg-gray-100 text-gray-800 border-gray-200', icon: Clock, label: status };
      }
    }
  };

  const { color, icon: Icon, label } = getStatusConfig(status, type);

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${color}`}
      role="status"
      aria-label={`${type === 'reset' ? 'Reset request' : type === 'strength' ? 'Password strength' : type === 'lock' ? 'Account' : 'Security'} status: ${label}`}
    >
      <Icon className="w-3 h-3 mr-1" aria-hidden="true" />
      {status}
    </span>
  );
};

const PasswordPolicyEditor: FC<{
  policy: PasswordPolicy;
  onSave: (policy: PasswordPolicy) => void;
  onCancel: () => void;
}> = ({ policy, onSave, onCancel }) => {
  const [editedPolicy, setEditedPolicy] = useState<PasswordPolicy>(policy);
  const [isSaving, setIsSaving] = useState(false);

  const handleSave = async () => {
    setIsSaving(true);
    try {
      await onSave(editedPolicy);
    } finally {
      setIsSaving(false);
    }
  };

  return (
    <Modal
      isOpen={true}
      onClose={onCancel}
      title="Edit Password Policy"
      size="lg"
      footer={
        <ModalFooter
          secondaryAction={
            <button
              onClick={onCancel}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Cancel
            </button>
          }
          primaryAction={
            <button
              onClick={handleSave}
              disabled={isSaving}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 disabled:opacity-50"
            >
              {isSaving ? (
                <>
                  <RefreshCw className="animate-spin w-4 h-4 mr-2" />
                  Saving...
                </>
              ) : (
                'Save Policy'
              )}
            </button>
          }
        />
      }
    >
      <div className="space-y-6">
        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="minLength" className="block text-sm font-medium text-gray-700 mb-1">
              Minimum Length
            </label>
            <input
              id="minLength"
              type="number"
              min="8"
              max="128"
              value={editedPolicy.min_length}
              onChange={(e) =>
                setEditedPolicy((prev) => ({
                  ...prev,
                  min_length: parseInt(e.target.value),
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label htmlFor="maxAge" className="block text-sm font-medium text-gray-700 mb-1">
              Maximum Age (days)
            </label>
            <input
              id="maxAge"
              type="number"
              min="0"
              max="365"
              value={editedPolicy.max_age_days}
              onChange={(e) =>
                setEditedPolicy((prev) => ({
                  ...prev,
                  max_age_days: parseInt(e.target.value),
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <div>
          <h4 className="text-sm font-medium text-gray-900 mb-3">Character Requirements</h4>
          <div className="space-y-2">
            {[
              { key: 'require_uppercase', label: 'Require uppercase letters' },
              { key: 'require_lowercase', label: 'Require lowercase letters' },
              { key: 'require_numbers', label: 'Require numbers' },
              { key: 'require_special_chars', label: 'Require special characters' },
            ].map(({ key, label }) => (
              <label key={key} className="flex items-center">
                <input
                  type="checkbox"
                  checked={editedPolicy[key as keyof PasswordPolicy] as boolean}
                  onChange={(e) =>
                    setEditedPolicy((prev) => ({
                      ...prev,
                      [key]: e.target.checked,
                    }))
                  }
                  className="mr-2 rounded border-gray-300"
                />
                <span className="text-sm text-gray-700">{label}</span>
              </label>
            ))}
          </div>
        </div>

        <div className="grid grid-cols-2 gap-4">
          <div>
            <label htmlFor="historyCount" className="block text-sm font-medium text-gray-700 mb-1">
              Password History Count
            </label>
            <input
              id="historyCount"
              type="number"
              min="0"
              max="24"
              value={editedPolicy.history_count}
              onChange={(e) =>
                setEditedPolicy((prev) => ({
                  ...prev,
                  history_count: parseInt(e.target.value),
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div>
            <label
              htmlFor="lockoutAttempts"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              Lockout After Attempts
            </label>
            <input
              id="lockoutAttempts"
              type="number"
              min="3"
              max="10"
              value={editedPolicy.lockout_attempts}
              onChange={(e) =>
                setEditedPolicy((prev) => ({
                  ...prev,
                  lockout_attempts: parseInt(e.target.value),
                }))
              }
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
        </div>

        <div>
          <label htmlFor="lockoutDuration" className="block text-sm font-medium text-gray-700 mb-1">
            Lockout Duration (minutes)
          </label>
          <input
            id="lockoutDuration"
            type="number"
            min="5"
            max="1440"
            value={editedPolicy.lockout_duration_minutes}
            onChange={(e) =>
              setEditedPolicy((prev) => ({
                ...prev,
                lockout_duration_minutes: parseInt(e.target.value),
              }))
            }
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>
      </div>
    </Modal>
  );
};

const BulkPasswordResetModal: FC<{
  isOpen: boolean;
  onClose: () => void;
  onSubmit: (userIds: string[], forceChange: boolean) => void;
}> = ({ isOpen, onClose, onSubmit }) => {
  const [userEmails, setUserEmails] = useState('');
  const [forceChange, setForceChange] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);

  const handleSubmit = async () => {
    const emails = userEmails
      .split('\n')
      .map((email) => email.trim())
      .filter(Boolean);
    if (emails.length === 0) return;

    setIsSubmitting(true);
    try {
      await onSubmit(emails, forceChange);
      setUserEmails('');
      onClose();
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={onClose}
      title="Bulk Password Reset"
      size="md"
      footer={
        <ModalFooter
          secondaryAction={
            <button
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 bg-white hover:bg-gray-50"
            >
              Cancel
            </button>
          }
          primaryAction={
            <button
              onClick={handleSubmit}
              disabled={!userEmails.trim() || isSubmitting}
              className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 disabled:opacity-50"
            >
              {isSubmitting ? (
                <>
                  <RefreshCw className="animate-spin w-4 h-4 mr-2" />
                  Processing...
                </>
              ) : (
                'Send Reset Emails'
              )}
            </button>
          }
        />
      }
    >
      <div className="space-y-4">
        <div>
          <label htmlFor="userEmails" className="block text-sm font-medium text-gray-700 mb-1">
            User Emails (one per line)
          </label>
          <textarea
            id="userEmails"
            rows={6}
            value={userEmails}
            onChange={(e) => setUserEmails(e.target.value)}
            placeholder="user1@example.com&#10;user2@example.com&#10;user3@example.com"
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
          />
        </div>

        <label className="flex items-center">
          <input
            type="checkbox"
            checked={forceChange}
            onChange={(e) => setForceChange(e.target.checked)}
            className="mr-2 rounded border-gray-300"
          />
          <span className="text-sm text-gray-700">Force password change on next login</span>
        </label>
      </div>
    </Modal>
  );
};

// ============================================================================
// Main Component
// ============================================================================

const PasswordManagementPage: FC = () => {
  const { hasPermission } = useAuth();
  const { error, handleError, clearError } = useErrorHandler();
  const { toast } = useToast();

  // State
  const [passwordPolicy, setPasswordPolicy] = useState<PasswordPolicy | null>(null);
  // Unused state for future implementation
  // const [resetRequests, setResetRequests] = useState<PasswordResetRequest[]>([]);
  // const [securityEvents, setSecurityEvents] = useState<SecurityEvent[]>([]);
  const [userPasswordStatus, setUserPasswordStatus] = useState<UserPasswordStatus[]>([]);
  const [stats, setStats] = useState<PasswordStats | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<
    'overview' | 'policy' | 'resets' | 'security' | 'users'
  >('overview');
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');
  const [showPolicyEditor, setShowPolicyEditor] = useState(false);
  const [showBulkReset, setShowBulkReset] = useState(false);

  // Check permissions
  const canManagePasswords = hasPermission('admin') || hasPermission('password:manage');

  // ============================================================================
  // Data Loading Functions
  // ============================================================================
  // React 19 Compiler handles memoization

  const loadPasswordData = async () => {
    if (!canManagePasswords) return;

    setIsLoading(true);
    try {
      const [policy, users, passwordStats] = await Promise.all([
        adminService.getPasswordPolicy(),
        adminService.getUserPasswordStatus(),
        adminService.getPasswordStats(),
      ]);

      setPasswordPolicy(policy);
      setUserPasswordStatus(users);
      setStats(passwordStats);
    } catch (error) {
      handleError(error, 'Failed to load password management data');
      toast.error('Failed to load password management data');
    } finally {
      setIsLoading(false);
    }
  };

  // ============================================================================
  // Action Functions
  // ============================================================================

  const handleSavePolicy = async (policy: PasswordPolicy) => {
    try {
      await adminService.updatePasswordPolicy(policy);
      setPasswordPolicy(policy);
      setShowPolicyEditor(false);
      toast.success('Password policy updated successfully');
    } catch (error) {
      handleError(error, 'Failed to update password policy');
      toast.error('Failed to update password policy');
    }
  };

  const handleBulkReset = async (userIds: string[], forceChange: boolean) => {
    try {
      await adminService.bulkPasswordReset(userIds, forceChange);
      await loadPasswordData();
      toast.success(
        `Password reset initiated for ${userIds.length} user${userIds.length > 1 ? 's' : ''}`
      );
    } catch (error) {
      handleError(error, 'Failed to process bulk password reset');
      toast.error('Failed to process bulk password reset');
    }
  };

  const handleUnlockAccount = async (userId: string) => {
    try {
      await adminService.unlockUserAccount(userId);
      await loadPasswordData();
      toast.success('Account unlocked successfully');
    } catch (error) {
      handleError(error, 'Failed to unlock user account');
      toast.error('Failed to unlock user account');
    }
  };

  const handleForcePasswordChange = async (userId: string) => {
    try {
      await adminService.forcePasswordChange(userId);
      await loadPasswordData();
      toast.success('User will be required to change password on next login');
    } catch (error) {
      handleError(error, 'Failed to force password change');
      toast.error('Failed to force password change');
    }
  };

  // ============================================================================
  // Filter Functions
  // ============================================================================

  const filteredUsers = userPasswordStatus.filter((user) => {
    const matchesSearch = user.email.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus =
      statusFilter === 'all' ||
      (statusFilter === 'locked' && user.account_locked) ||
      (statusFilter === 'expired' &&
        user.password_age_days > (passwordPolicy?.max_age_days || 90)) ||
      (statusFilter === 'weak' && user.password_strength === 'weak') ||
      (statusFilter === 'breach' && user.breach_detected);
    return matchesSearch && matchesStatus;
  });

  // Filter functions for future implementation
  // const filteredEvents = securityEvents.filter(event => {
  //   return event.email.toLowerCase().includes(searchTerm.toLowerCase());
  // });

  // ============================================================================
  // Effects
  // ============================================================================

  useEffect(() => {
    loadPasswordData();
  }, [loadPasswordData]);

  // ============================================================================
  // Render
  // ============================================================================

  if (!canManagePasswords) {
    return (
      <div className="min-h-screen bg-gray-50 py-8">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="text-center py-12">
            <Key className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
            <p className="text-gray-600">You don't have permission to manage passwords.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <Breadcrumb />
          <div className="mt-4 flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Password Management</h1>
              <p className="text-gray-600 mt-1">
                Security policies, password resets, and breach monitoring
              </p>
            </div>
            <div className="flex space-x-3">
              <button
                onClick={() => setShowBulkReset(true)}
                className="inline-flex items-center px-4 py-2 border border-red-300 rounded-md shadow-sm text-sm font-medium text-red-700 bg-red-50 hover:bg-red-100"
              >
                <RefreshCw className="w-4 h-4 mr-2" />
                Bulk Reset
              </button>
              <button
                onClick={loadPasswordData}
                disabled={isLoading}
                className="inline-flex items-center px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 disabled:opacity-50"
              >
                <RefreshCw className={`w-4 h-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
                Refresh
              </button>
            </div>
          </div>
        </div>

        {/* Error Alert */}
        {error && (
          <div className="mb-6">
            <ErrorAlert error={error} onDismiss={clearError} />
          </div>
        )}

        {/* Stats Overview */}
        {stats && (
          <div
            className="grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4 mb-8"
            role="region"
            aria-label="Password management statistics"
          >
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.total_users} total users`}
            >
              <div className="flex items-center">
                <User className="w-6 h-6 text-blue-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Total Users</p>
                  <p className="text-lg font-semibold text-gray-900">{stats.total_users}</p>
                </div>
              </div>
            </div>
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.users_with_weak_passwords} users with weak passwords`}
            >
              <div className="flex items-center">
                <AlertTriangle className="w-6 h-6 text-red-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Weak Passwords</p>
                  <p className="text-lg font-semibold text-gray-900">
                    {stats.users_with_weak_passwords}
                  </p>
                </div>
              </div>
            </div>
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.users_with_expired_passwords} users with expired passwords`}
            >
              <div className="flex items-center">
                <Clock className="w-6 h-6 text-yellow-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Expired</p>
                  <p className="text-lg font-semibold text-gray-900">
                    {stats.users_with_expired_passwords}
                  </p>
                </div>
              </div>
            </div>
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.locked_accounts} locked accounts`}
            >
              <div className="flex items-center">
                <Lock className="w-6 h-6 text-orange-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Locked</p>
                  <p className="text-lg font-semibold text-gray-900">{stats.locked_accounts}</p>
                </div>
              </div>
            </div>
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.recent_breaches_detected} recent breaches detected`}
            >
              <div className="flex items-center">
                <Shield className="w-6 h-6 text-purple-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Breaches</p>
                  <p className="text-lg font-semibold text-gray-900">
                    {stats.recent_breaches_detected}
                  </p>
                </div>
              </div>
            </div>
            <div
              className="bg-white rounded-lg shadow-sm border p-4"
              role="status"
              aria-label={`${stats.pending_reset_requests} pending reset requests`}
            >
              <div className="flex items-center">
                <RefreshCw className="w-6 h-6 text-green-600 mr-3" aria-hidden="true" />
                <div>
                  <p className="text-xs font-medium text-gray-600">Reset Requests</p>
                  <p className="text-lg font-semibold text-gray-900">
                    {stats.pending_reset_requests}
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Tabs */}
        <div className="bg-white rounded-lg shadow-sm border">
          <div className="border-b border-gray-200">
            <div className="flex items-center justify-between px-6 py-4">
              <div role="tablist" aria-label="Password management sections">
                <nav className="-mb-px flex space-x-8">
                  {[
                    { key: 'overview', label: 'Overview' },
                    { key: 'policy', label: 'Password Policy' },
                    { key: 'users', label: 'User Status' },
                    { key: 'resets', label: 'Reset Requests' },
                    { key: 'security', label: 'Security Events' },
                  ].map(({ key, label }) => (
                    <button
                      key={key}
                      onClick={() =>
                        setActiveTab(key as 'overview' | 'policy' | 'resets' | 'security' | 'users')
                      }
                      role="tab"
                      aria-selected={activeTab === key}
                      aria-controls={`${key}-panel`}
                      className={`py-2 px-1 border-b-2 font-medium text-sm ${
                        activeTab === key
                          ? 'border-blue-500 text-blue-600'
                          : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                      }`}
                    >
                      {label}
                    </button>
                  ))}
                </nav>
              </div>

              {(activeTab === 'users' || activeTab === 'resets' || activeTab === 'security') && (
                <div className="flex space-x-4">
                  <div className="relative" role="search">
                    <Search
                      className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"
                      aria-hidden="true"
                    />
                    <input
                      type="text"
                      placeholder="Search..."
                      value={searchTerm}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      aria-label="Search records"
                      className="pl-10 pr-4 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    />
                  </div>
                  {activeTab === 'users' && (
                    <select
                      value={statusFilter}
                      onChange={(e) => setStatusFilter(e.target.value)}
                      aria-label="Filter users by status"
                      className="px-3 py-2 border border-gray-300 rounded-md text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                    >
                      <option value="all">All Users</option>
                      <option value="locked">Locked</option>
                      <option value="expired">Expired</option>
                      <option value="weak">Weak Password</option>
                      <option value="breach">Breach Detected</option>
                    </select>
                  )}
                </div>
              )}
            </div>
          </div>

          <div className="p-6">
            {/* Overview Tab */}
            {activeTab === 'overview' && (
              <div role="tabpanel" id="overview-panel" aria-labelledby="overview-tab">
                <div className="space-y-6">
                  {passwordPolicy && (
                    <div className="bg-gray-50 rounded-lg p-6">
                      <h3 className="text-lg font-medium text-gray-900 mb-4">
                        Current Password Policy
                      </h3>
                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                        <div>
                          <p className="text-gray-500">Min Length</p>
                          <p className="font-medium">{passwordPolicy.min_length} characters</p>
                        </div>
                        <div>
                          <p className="text-gray-500">Max Age</p>
                          <p className="font-medium">{passwordPolicy.max_age_days} days</p>
                        </div>
                        <div>
                          <p className="text-gray-500">History</p>
                          <p className="font-medium">{passwordPolicy.history_count} passwords</p>
                        </div>
                        <div>
                          <p className="text-gray-500">Lockout</p>
                          <p className="font-medium">{passwordPolicy.lockout_attempts} attempts</p>
                        </div>
                      </div>
                    </div>
                  )}

                  <div className="text-center py-8">
                    <Key className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                    <h3 className="text-lg font-medium text-gray-900 mb-2">
                      Password Management Overview
                    </h3>
                    <p className="text-gray-600 mb-4">
                      Use the tabs above to manage password policies, view user status, and monitor
                      security events.
                    </p>
                  </div>
                </div>
              </div>
            )}

            {/* Policy Tab */}
            {activeTab === 'policy' && passwordPolicy && (
              <div role="tabpanel" id="policy-panel" aria-labelledby="policy-tab">
                <div className="space-y-6">
                  <div className="flex items-center justify-between">
                    <h3 className="text-lg font-medium text-gray-900">
                      Password Policy Configuration
                    </h3>
                    <button
                      onClick={() => setShowPolicyEditor(true)}
                      className="inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700"
                    >
                      <Settings className="w-4 h-4 mr-2" />
                      Edit Policy
                    </button>
                  </div>

                  <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
                    <div className="px-6 py-4 bg-gray-50 border-b border-gray-200">
                      <h4 className="font-medium text-gray-900">Current Settings</h4>
                    </div>
                    <div className="p-6 space-y-4">
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                          <h5 className="font-medium text-gray-900 mb-3">Length & Complexity</h5>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Minimum length:</span>
                              <span className="font-medium">
                                {passwordPolicy.min_length} characters
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Uppercase letters:</span>
                              <span
                                className={
                                  passwordPolicy.require_uppercase
                                    ? 'text-green-600'
                                    : 'text-gray-400'
                                }
                              >
                                {passwordPolicy.require_uppercase ? 'Required' : 'Optional'}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Lowercase letters:</span>
                              <span
                                className={
                                  passwordPolicy.require_lowercase
                                    ? 'text-green-600'
                                    : 'text-gray-400'
                                }
                              >
                                {passwordPolicy.require_lowercase ? 'Required' : 'Optional'}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Numbers:</span>
                              <span
                                className={
                                  passwordPolicy.require_numbers
                                    ? 'text-green-600'
                                    : 'text-gray-400'
                                }
                              >
                                {passwordPolicy.require_numbers ? 'Required' : 'Optional'}
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Special characters:</span>
                              <span
                                className={
                                  passwordPolicy.require_special_chars
                                    ? 'text-green-600'
                                    : 'text-gray-400'
                                }
                              >
                                {passwordPolicy.require_special_chars ? 'Required' : 'Optional'}
                              </span>
                            </div>
                          </div>
                        </div>

                        <div>
                          <h5 className="font-medium text-gray-900 mb-3">Security & Lockout</h5>
                          <div className="space-y-2 text-sm">
                            <div className="flex justify-between">
                              <span className="text-gray-600">Maximum age:</span>
                              <span className="font-medium">
                                {passwordPolicy.max_age_days} days
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">History count:</span>
                              <span className="font-medium">
                                {passwordPolicy.history_count} passwords
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Lockout attempts:</span>
                              <span className="font-medium">
                                {passwordPolicy.lockout_attempts} failed logins
                              </span>
                            </div>
                            <div className="flex justify-between">
                              <span className="text-gray-600">Lockout duration:</span>
                              <span className="font-medium">
                                {passwordPolicy.lockout_duration_minutes} minutes
                              </span>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            )}

            {/* Users Tab */}
            {activeTab === 'users' && (
              <div role="tabpanel" id="users-panel" aria-labelledby="users-tab">
                <div className="overflow-x-auto">
                  <table
                    className="min-w-full divide-y divide-gray-200"
                    role="table"
                    aria-label="User password status"
                  >
                    <thead className="bg-gray-50">
                      <tr>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          User
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          Password Age
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          Strength
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          Status
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          Failed Attempts
                        </th>
                        <th
                          scope="col"
                          className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider"
                        >
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {isLoading ? (
                        Array.from({ length: 5 }).map((_, i) => (
                          <tr key={i}>
                            <td className="px-6 py-4">
                              <Skeleton className="h-4 w-32" />
                            </td>
                            <td className="px-6 py-4">
                              <Skeleton className="h-4 w-16" />
                            </td>
                            <td className="px-6 py-4">
                              <Skeleton className="h-6 w-20" />
                            </td>
                            <td className="px-6 py-4">
                              <Skeleton className="h-6 w-16" />
                            </td>
                            <td className="px-6 py-4">
                              <Skeleton className="h-4 w-8" />
                            </td>
                            <td className="px-6 py-4">
                              <Skeleton className="h-8 w-20" />
                            </td>
                          </tr>
                        ))
                      ) : filteredUsers.length > 0 ? (
                        filteredUsers.map((user) => (
                          <tr key={user.user_id} className="hover:bg-gray-50">
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="flex items-center">
                                <User className="w-4 h-4 text-gray-400 mr-2" aria-hidden="true" />
                                <div>
                                  <div className="text-sm font-medium text-gray-900">
                                    {user.email}
                                  </div>
                                  <div className="text-sm text-gray-500">{user.user_id}</div>
                                </div>
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {user.password_age_days} days
                              {passwordPolicy &&
                                user.password_age_days > passwordPolicy.max_age_days && (
                                  <span
                                    className="ml-1 text-red-500"
                                    role="img"
                                    aria-label="Expired"
                                  >
                                    *
                                  </span>
                                )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <StatusBadge status={user.password_strength} type="strength" />
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <StatusBadge
                                status={user.account_locked ? 'locked' : 'unlocked'}
                                type="lock"
                              />
                              {user.breach_detected && (
                                <span
                                  className="ml-2 inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-800"
                                  role="status"
                                  aria-label="Password breach detected"
                                >
                                  Breach
                                </span>
                              )}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {user.failed_login_attempts}
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                              <div className="flex justify-end space-x-2">
                                {user.account_locked && (
                                  <button
                                    onClick={() => handleUnlockAccount(user.user_id)}
                                    className="text-blue-600 hover:text-blue-900"
                                    aria-label={`Unlock account for ${user.email}`}
                                  >
                                    <Unlock className="w-4 h-4" aria-hidden="true" />
                                  </button>
                                )}
                                <button
                                  onClick={() => handleForcePasswordChange(user.user_id)}
                                  className="text-orange-600 hover:text-orange-900"
                                  aria-label={`Force password change for ${user.email}`}
                                >
                                  <RefreshCw className="w-4 h-4" aria-hidden="true" />
                                </button>
                              </div>
                            </td>
                          </tr>
                        ))
                      ) : (
                        <tr>
                          <td colSpan={6} className="px-6 py-12 text-center">
                            <User
                              className="w-12 h-12 text-gray-400 mx-auto mb-4"
                              aria-hidden="true"
                            />
                            <h3 className="text-lg font-medium text-gray-900 mb-2">
                              No users found
                            </h3>
                            <p className="text-gray-600">
                              No users match your current filter criteria.
                            </p>
                          </td>
                        </tr>
                      )}
                    </tbody>
                  </table>
                </div>
              </div>
            )}

            {/* Other tabs would go here with similar content structure */}
            {activeTab === 'resets' && (
              <div role="tabpanel" id="resets-panel" aria-labelledby="resets-tab">
                <div className="text-center py-8">
                  <RefreshCw className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    Password Reset Requests
                  </h3>
                  <p className="text-gray-600">Reset request management interface would go here.</p>
                </div>
              </div>
            )}

            {activeTab === 'security' && (
              <div role="tabpanel" id="security-panel" aria-labelledby="security-tab">
                <div className="text-center py-8">
                  <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" aria-hidden="true" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Security Events</h3>
                  <p className="text-gray-600">
                    Security event monitoring interface would go here.
                  </p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>

      {/* Modals */}
      {showPolicyEditor && passwordPolicy && (
        <PasswordPolicyEditor
          policy={passwordPolicy}
          onSave={handleSavePolicy}
          onCancel={() => setShowPolicyEditor(false)}
        />
      )}

      <BulkPasswordResetModal
        isOpen={showBulkReset}
        onClose={() => setShowBulkReset(false)}
        onSubmit={handleBulkReset}
      />
    </div>
  );
};

export default PasswordManagementPage;
