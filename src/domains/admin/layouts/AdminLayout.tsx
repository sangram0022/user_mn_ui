/**
 * Admin Layout Component
 *
 * Provides a specialized layout for admin pages with sidebar navigation,
 * breadcrumbs, and admin-specific UI elements.
 *
 * @author Generated by GitHub Copilot
 */

import type { LucideIcon } from 'lucide-react';
import {
  Activity,
  BarChart3,
  ChevronRight,
  Database,
  FileText,
  Lock,
  Menu,
  Settings,
  Shield,
  X,
} from 'lucide-react';
import { useState, type FC, type ReactNode } from 'react';
import { Link, useLocation } from 'react-router-dom';

import { useAuth } from '@domains/auth/context/AuthContext';

interface AdminLayoutProps {
  children: ReactNode;
}

interface AdminNavItem {
  name: string;
  href: string;
  icon: LucideIcon;
  description: string;
}

const adminNavItems: AdminNavItem[] = [
  {
    name: 'Dashboard',
    href: '/admin/dashboard',
    icon: BarChart3,
    description: 'Overview and quick actions',
  },
  {
    name: 'Role Management',
    href: '/admin/roles',
    icon: Shield,
    description: 'Manage roles and permissions',
  },
  {
    name: 'Audit Logs',
    href: '/admin/audit-logs',
    icon: FileText,
    description: 'System activity and logs',
  },
  {
    name: 'Bulk Operations',
    href: '/admin/bulk-operations',
    icon: Database,
    description: 'Batch user operations',
  },
  {
    name: 'GDPR Compliance',
    href: '/admin/gdpr-compliance',
    icon: Shield,
    description: 'Data protection and privacy',
  },
  {
    name: 'Health Monitoring',
    href: '/admin/health-monitoring',
    icon: Activity,
    description: 'System health and metrics',
  },
  {
    name: 'Password Management',
    href: '/admin/password-management',
    icon: Lock,
    description: 'Security policies and credentials',
  },
];

const AdminLayout: FC<AdminLayoutProps> = ({ children }) => {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);
  const location = useLocation();
  const { user, hasPermission } = useAuth();

  // Check if user has admin permissions
  const canAccessAdmin = hasPermission('admin') || user?.role === 'admin';

  const isActive = (href: string) =>
    location.pathname === href ||
    (href !== '/admin/dashboard' && location.pathname.startsWith(href));

  const generateBreadcrumbs = () => {
    const pathSegments = location.pathname.split('/').filter(Boolean);
    const breadcrumbs = [{ name: 'Admin', href: '/admin/dashboard' }];

    if (pathSegments.length > 1) {
      const currentPage = adminNavItems.find((item) => isActive(item.href));
      if (currentPage) {
        breadcrumbs.push({ name: currentPage.name, href: currentPage.href });
      }
    }

    return breadcrumbs;
  };

  if (!canAccessAdmin) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <Shield className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">Access Restricted</h3>
          <p className="text-gray-600">You don't have permission to access the admin area.</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Mobile sidebar overlay */}
      {isSidebarOpen && (
        <button
          type="button"
          className="fixed inset-0 z-40 lg:hidden bg-gray-600 bg-opacity-75"
          onClick={() => setIsSidebarOpen(false)}
          onKeyDown={(e) => {
            if (e.key === 'Escape') setIsSidebarOpen(false);
          }}
          aria-label="Close sidebar"
        />
      )}

      {/* Sidebar */}
      <div
        className={`
        fixed inset-y-0 left-0 z-50 w-64 bg-white shadow-lg transform transition-transform duration-200 ease-in-out lg:translate-x-0 lg:static lg:inset-0
        ${isSidebarOpen ? 'translate-x-0' : '-translate-x-full'}
      `}
      >
        <div className="flex flex-col h-full">
          {/* Header */}
          <div className="flex items-center justify-between h-16 px-4 border-b border-gray-200">
            <div className="flex items-center gap-3">
              <div className="flex h-8 w-8 items-center justify-center rounded-lg bg-gradient-to-br from-blue-500 to-purple-600">
                <Settings className="h-4 w-4 text-white" />
              </div>
              <span className="text-lg font-semibold text-gray-900">Admin Panel</span>
            </div>
            <button
              onClick={() => setIsSidebarOpen(false)}
              className="lg:hidden p-1 rounded-md text-gray-400 hover:text-gray-600"
            >
              <X className="w-5 h-5" />
            </button>
          </div>

          {/* Navigation */}
          <nav className="flex-1 px-4 py-6 space-y-1">
            {adminNavItems.map((item) => {
              const Icon = item.icon;
              const active = isActive(item.href);

              return (
                <Link
                  key={item.name}
                  to={item.href}
                  onClick={() => setIsSidebarOpen(false)}
                  className={`
                    group flex items-center px-3 py-3 text-sm font-medium rounded-lg transition-colors duration-200
                    ${
                      active
                        ? 'bg-blue-50 text-blue-700 border-r-2 border-blue-700'
                        : 'text-gray-700 hover:bg-gray-50 hover:text-blue-600'
                    }
                  `}
                >
                  <Icon
                    className={`
                    flex-shrink-0 w-5 h-5 mr-3 transition-colors duration-200
                    ${active ? 'text-blue-700' : 'text-gray-400 group-hover:text-blue-600'}
                  `}
                  />
                  <div className="flex-1 min-w-0">
                    <div className={`text-sm font-medium ${active ? 'text-blue-700' : ''}`}>
                      {item.name}
                    </div>
                    <div className={`text-xs mt-0.5 ${active ? 'text-blue-600' : 'text-gray-500'}`}>
                      {item.description}
                    </div>
                  </div>
                  {active && <ChevronRight className="w-4 h-4 text-blue-700" />}
                </Link>
              );
            })}
          </nav>

          {/* Footer */}
          <div className="p-4 border-t border-gray-200">
            <div className="flex items-center gap-3">
              <div className="flex h-8 w-8 items-center justify-center rounded-full bg-gradient-to-br from-blue-500 to-purple-600">
                <span className="text-xs font-medium text-white">
                  {user?.full_name?.charAt(0) || user?.email?.charAt(0)?.toUpperCase() || 'A'}
                </span>
              </div>
              <div className="flex-1 min-w-0">
                <div className="text-sm font-medium text-gray-900 truncate">
                  {user?.full_name || user?.username || 'Admin'}
                </div>
                <div className="text-xs text-gray-500">Administrator</div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="lg:pl-64">
        {/* Top bar */}
        <div className="sticky top-0 z-30 flex h-16 bg-white shadow-sm border-b border-gray-200">
          <button
            onClick={() => setIsSidebarOpen(true)}
            className="px-4 text-gray-500 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 lg:hidden"
          >
            <Menu className="h-5 w-5" />
          </button>

          <div className="flex-1 px-4 flex items-center justify-between">
            {/* Breadcrumbs */}
            <nav className="flex" aria-label="Breadcrumb">
              <ol className="flex items-center space-x-2">
                {generateBreadcrumbs().map((crumb, index) => (
                  <li key={crumb.href} className="flex items-center">
                    {index > 0 && <ChevronRight className="w-4 h-4 text-gray-400 mx-2" />}
                    <Link
                      to={crumb.href}
                      className={`text-sm font-medium ${
                        index === generateBreadcrumbs().length - 1
                          ? 'text-gray-900'
                          : 'text-gray-500 hover:text-gray-700'
                      }`}
                    >
                      {crumb.name}
                    </Link>
                  </li>
                ))}
              </ol>
            </nav>

            {/* User info */}
            <div className="flex items-center gap-3">
              <Link to="/" className="text-sm text-gray-500 hover:text-gray-700 transition-colors">
                Back to App
              </Link>
            </div>
          </div>
        </div>

        {/* Page content */}
        <main className="flex-1">{children}</main>
      </div>
    </div>
  );
};

export default AdminLayout;
