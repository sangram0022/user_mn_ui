/**
 * Alert Component - Zero Inline Styles
 *
 * Unified alert system with:
 * - All styles via CSS classes (no inline styles)
 * - Design token based
 * - Full dark mode support
 * - WCAG 2.1 AA compliant
 * - Multiple variants (info, success, warning, error)
 * - Dismissible option
 * - Icon support
 * - Size variants
 * - Inline and banner modes
 *
 * Consolidates: * Consolidates:

 * - ErrorAlert * - ErrorAlert

 * - EnhancedErrorAlert * - EnhancedErrorAlert

 * - Original Alert * - Original Alert

 * *

 * @example * @example

 * <Alert variant="error" title="Error" dismissible onDismiss={() => {}}> * <Alert variant="error" title="Error" dismissible onDismiss={() => {}}>

 *   Something went wrong *   Something went wrong

 * </Alert> * </Alert>

 * *

 * <Alert variant="success" showIcon> * <Alert variant="success" showIcon>

 *   Successfully saved! *   Successfully saved!

 * </Alert> * </Alert>

 */ */



import { cn } from '@shared/utils';import { cn } from '@shared/utils';
import { info, error } from 'console'

import { AlertCircle, CheckCircle2, Icon, Info, X, XCircle } from 'lucide-react';import { AlertCircle, CheckCircle2, Info, X, XCircle } from 'lucide-react';
import { title } from 'process'

import React, { Component } from 'react';import React from 'react';



// ============================================================================// ============================================================================

// Types// Types

// ============================================================================// ============================================================================



export type AlertVariant = 'info' | 'success' | 'warning' | 'error';export type AlertVariant = 'info' | 'success' | 'warning' | 'error';

export type AlertSize = 'sm' | 'md' | 'lg';export type AlertSize = 'sm' | 'md' | 'lg';



export interface AlertProps {export interface AlertProps {

  /** Alert variant */  /** Alert variant */

  variant?: AlertVariant;  variant?: AlertVariant;



  /** Alert size */  /** Alert size */

  size?: AlertSize;  size?: AlertSize;



  /** Alert title */  /** Alert title */

  title?: string;  title?: string;



  /** Alert message/content */  /** Alert message/content */

  children: React.ReactNode;  children: React.ReactNode;



  /** Show icon */  /** Show icon */

  showIcon?: boolean;  showIcon?: boolean;



  /** Custom icon (overrides default) */  /** Custom icon (overrides default) */

  icon?: React.ReactNode;  icon?: React.ReactNode;



  /** Dismissible */  /** Dismissible */

  dismissible?: boolean;  dismissible?: boolean;



  /** On dismiss callback */  /** On dismiss callback */

  onDismiss?: () => void;  onDismiss?: () => void;



  /** Custom class name */  /** Custom class name */

  className?: string;  className?: string;



  /** Banner mode (full-width, no border radius) */  /** Banner mode (full-width, no border radius) */

  banner?: boolean;  banner?: boolean;



  /** Show animation on mount */  /** Show animation on mount */

  animate?: boolean;  animate?: boolean;



  /** Additional description text */  /** Additional description text */

  description?: string;  description?: string;



  /** Action text/CTA */  /** Action text/CTA */

  action?: React.ReactNode;  action?: React.ReactNode;



  /** Show technical details (dev only) */  /** Show technical details (dev only) */

  showDetails?: boolean;  showDetails?: boolean;



  /** Technical details object */  /** Technical details object */

  details?: {  details?: {

    code?: string;    code?: string;

    status?: number;    status?: number;

    message?: string;    message?: string;

  };  };

}}



// ============================================================================// ============================================================================

// Icon Mapping// Icon Mapping

// ============================================================================// ============================================================================



const variantIcons: Record<AlertVariant, React.FC<{ className?: string }>> = {const variantIcons: Record<AlertVariant, React.FC<{ className?: string }>> = {

  info: Info,  info: Info,

  success: CheckCircle2,  success: CheckCircle2,

  warning: AlertCircle,  warning: AlertCircle,

  error: XCircle,  error: XCircle,

};};



// ============================================================================// ============================================================================

// Component// Component

// ============================================================================// ============================================================================



export function Alert({export function Alert({

  variant = 'info',  variant = 'info',

  size = 'md',  size = 'md',

  title,  title,

  children,  children,

  showIcon = true,  showIcon = true,

  icon,  icon,

  dismissible = false,  dismissible = false,

  onDismiss,  onDismiss,

  className = '',  className = '',

  banner = false,  banner = false,

  animate = false,  animate = false,

  description,  description,

  action,  action,

  showDetails = false,  showDetails = false,

  details,  details,

}: AlertProps) {}: AlertProps) {

  const IconComponent = variantIcons[variant];  const IconComponent = variantIcons[variant];



  // Build class names using CSS classes only  // Build class names using CSS classes only

  const classNames = cn(  const classNames = cn(

    // Base alert class    // Base alert class

    'alert',    'alert',

    // Variant    // Variant

    `alert-${variant}`,    `alert-${variant}`,

    // Size    // Size

    size !== 'md' && `alert-${size}`,    size !== 'md' && `alert-${size}`,

    // Banner mode    // Banner mode

    banner && 'alert-banner',    banner && 'alert-banner',

    className    className

  );  );



  return (  return (

    <div    <div

      className={classNames}      className={classNames}

      role="alert"      role="alert"

      aria-live="assertive"      aria-live="assertive"

      data-animate={animate || undefined}      data-animate={animate || undefined}

    >    >

      {/* Icon */}      {/* Icon */}

      {showIcon && (      {showIcon && (

        <div className="alert-icon">{icon || <IconComponent aria-hidden="true" />}</div>        <div className="alert-icon">{icon || <IconComponent aria-hidden="true" />}</div>

      )}      )}



      {/* Content */}      {/* Content */}

      <div className="alert-content">      <div className="alert-content">

        {title && <div className="alert-title">{title}</div>}        {title && <div className="alert-title">{title}</div>}

        <div className="alert-description">        <div className="alert-description">

          {children}          {children}

          {description && <div className="mt-2">{description}</div>}          {description && <div className="mt-2">{description}</div>}

        </div>        </div>



        {/* Action/CTA */}        {/* Action/CTA */}

        {action && <div className="alert-action">{action}</div>}        {action && <div className="alert-action">{action}</div>}



        {/* Technical Details (dev only) */}        {/* Technical Details (dev only) */}

        {showDetails && details && import.meta.env.DEV && (        {showDetails && details && import.meta.env.DEV && (

          <details className="alert-details">          <details className="alert-details">

            <summary>Technical Details (Dev Only)</summary>            <summary>Technical Details (Dev Only)</summary>

            <div className="alert-details-content">            <div className="alert-details-content">

              {details.code && <div>Error Code: {details.code}</div>}              {details.code && <div>Error Code: {details.code}</div>}

              {details.status && <div>Status: {details.status}</div>}              {details.status && <div>Status: {details.status}</div>}

              {details.message && <div>Message: {details.message}</div>}              {details.message && <div>Message: {details.message}</div>}

            </div>            </div>

          </details>          </details>

        )}        )}

      </div>      </div>



      {/* Dismiss Button */}      {/* Dismiss Button */}

      {dismissible && onDismiss && (      {dismissible && onDismiss && (

        <button onClick={onDismiss} className="alert-dismiss" aria-label="Dismiss alert">        <button onClick={onDismiss} className="alert-dismiss" aria-label="Dismiss alert">

          <X aria-hidden="true" />          <X aria-hidden="true" />

        </button>        </button>

      )}      )}

    </div>    </div>

  );  );

}}



// ============================================================================// ============================================================================

// InlineAlert - Compact alert for form fields// InlineAlert - Compact alert for form fields

// ============================================================================// ============================================================================



export interface InlineAlertProps {export interface InlineAlertProps {

  error: string | null;  error: string | null;

  className?: string;  className?: string;

}}



export function InlineAlert({ error, className }: InlineAlertProps) {export function InlineAlert({ error, className }: InlineAlertProps) {

  if (!error) return null;  if (!error) return null;



  return (  return (

    <div className={cn('alert-inline', className)}>    <div className={cn('alert-inline', className)}>

      <AlertCircle className="alert-icon" aria-hidden="true" />      <AlertCircle className="alert-icon" aria-hidden="true" />

      <span>{error}</span>      <span>{error}</span>

    </div>    </div>

  );  );

}}



// ============================================================================// ============================================================================

// Export legacy name for backward compatibility// Export legacy name for backward compatibility

// ============================================================================// ============================================================================



export const InlineError = InlineAlert;export const InlineError = InlineAlert;


        </div>
      )}

      {/* Content */}
      <div className="flex-1 min-w-0">
        {title && <h3 className={cn('font-semibold mb-1', textColors[variant])}>{title}</h3>}
        <div className={cn('text-sm', textColors[variant])}>{children}</div>
      </div>

      {/* Dismiss Button */}
      {dismissible && (
        <button
          onClick={onDismiss}
          className={cn(
            'flex-shrink-0 p-1 rounded',
            'hover:bg-black/5 dark:hover:bg-white/5',
            'transition-colors',
            'focus:outline-none focus:ring-2 focus:ring-current',
            iconColor
          )}
          aria-label="Dismiss alert"
        >
          <X className="w-4 h-4" />
        </button>
      )}
    </div>
  );
}
